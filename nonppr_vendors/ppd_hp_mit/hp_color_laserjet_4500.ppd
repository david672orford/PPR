*PPD-Adobe: "4.3"

*% =================================
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright 1992-2003 Hewlett-Packard Company
*%
*% Permission is hereby granted, free of charge, to any person obtaining
*% a copy of this software and associated documentation files (the
*% "Software"), to deal in the Software without restriction, including
*% without limitation the rights to use, copy, modify, merge, publish,
*% distribute, sublicense, and/or sell copies of the Software, and to
*% permit persons to whom the Software is furnished to do so, subject to
*% the following conditions:
*% 
*% The above copyright notice and this permission notice shall be
*% included in all copies or substantial portions of the Software.
*% 
*% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
*% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
*% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
*% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
*% LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
*% OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
*% WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*% 
*% [this is the MIT open source license -- please see www.opensource.org]
*%

*% PPD Version for Apple Macintosh

*% =================================
*% Product/PPD Version Information
*% =================================
*% PPD File Version Information
*FormatVersion: "4.3"
*FileVersion: "1.2.0 X"
*LanguageVersion: English
*LanguageEncoding: MacStandard
*PCFileName: "HP4500.PPD"
*APDialogExtension: "/Library/Printers/hp/PDEs/hpColorOptions.plugin"
*APDialogExtension: "/Library/Printers/hp/PDEs/hpEdgeToEdge.plugin"
*APDialogExtension: "/Library/Printers/hp/PDEs/hpFinishing.plugin"
*APDialogExtension: "/Library/Printers/hp/PDEs/hpImageQuality.plugin"
*APDialogExtension: "/Library/Printers/hp/PDEs/hpProofAndPrint.plugin"
*cupsICCProfile RGB../sRGB Matching Profile: "/Library/Printers/hp/Profiles/sRGB_A.icc"
*APPrinterIconPath: "/Library/Printers/hp/Icons/HP Color LaserJet 4500.icns"

*% Product Name and Version Information
*Manufacturer:	"HP"
*Product: 	 "(HP Color LaserJet 4500)"
*ModelName:	"HP Color LaserJet 4500"
*ShortNickName: "HP Color LaserJet 4500"
*NickName:	"HP Color LaserJet 4500 v2014.200"
*PSVersion:	"(2014.200) 0"

*% =================================
*% Basic Device Capabilities
*% =================================
*LanguageLevel: 	"2"
*ColorDevice:  		True
*DefaultColorSpace:	CMYK
*TTRasterizer: 		Type42
*Throughput: 		"16"

*FileSystem: 		False

*% =================================
*% Emulations and Protocols
*% =================================
*Protocols: PJL TBCP

*% =================================
*% PostScript Patches
*% =================================
*JobPatchFile 1: "
	(HP Color LaserJet 4500) product eq {
		/findcolorrendering where {
			/HP_sRGB_CRD
			<<
			/ColorRenderingType 1
			/RangePQR [ -0.5 2 -0.5 2 -0.5 2 ]
			/MatrixPQR [0.8951 -0.7502 0.0389
			        0.2664 1.7135 -0.0685
			        -0.1614 0.0367 1.0296]
			/TransformPQR
			        [{exch pop exch 3 get mul exch pop exch 3 get div} bind
			        {exch pop exch 4 get mul exch pop exch 4 get div} bind
			        {exch pop exch 5 get mul exch pop exch 5 get div} bind]
			/MatrixLMN [3.240449 -0.969265 0.055643
			        -1.537136 1.876011 -0.204026
			        -0.498531 0.041556 1.057229]
			        /EncodeABC [{dup 0.00304 le {12.92321 mul}
			        {1 2.4 div exp 1.055 mul 0.055 sub}ifelse}
			        bind dup dup]
			/WhitePoint[0.9505 1 1.0890] % D65
			/BlackPoint [0 0 0]
			>> /ColorRendering defineresource pop
			/findcolorrendering { pop /HP_sRGB_CRD true } bind def
		}if
	}if"
*End
*JobPatchFile 2: "
/limitinterpolate { dup type /dicttype eq { dup /Interpolate known { dup /Interpolate get {
	1 1 idtransform 2 index /ImageMatrix get dtransform exch abs 1 exch div exch abs 1 exch div 2 copy lt
	{ exch }if pop 4 lt { dup /Interpolate false put } if } if } if } if
} bind def
/image { limitinterpolate systemdict /image get exec } bind def
/imagemask { limitinterpolate systemdict /imagemask get exec } bind def"
*End

*% =================================
*% Installable Options
*% =================================
*OpenGroup: InstallableOptions/Options Installed
*OpenUI *HPOption_500_Sheet_Feeder_Tray3/500-Sheet Paper Feeder: Boolean
*DefaultHPOption_500_Sheet_Feeder_Tray3: False
*HPOption_500_Sheet_Feeder_Tray3 True/Installed: ""
*HPOption_500_Sheet_Feeder_Tray3 False/Not Installed: ""
*?HPOption_500_Sheet_Feeder: "
	save
		currentpagedevice /InputAttributes get
		dup 1 known
		{1 get null eq {(False)}{(True)}ifelse}{pop (False)}ifelse = flush
	restore
"
*End
*CloseUI: *HPOption_500_Sheet_Feeder_Tray3

*OpenUI *InstalledMemory/Memory Configuration: PickOne
*DefaultInstalledMemory: Mem1
*InstalledMemory Mem1/32 - 39 MB RAM: ""
*InstalledMemory Mem2/40 - 63 MB RAM: ""
*InstalledMemory Mem3/64 - 95 MB RAM: ""
*InstalledMemory Mem4/96 - 127 MB RAM: ""
*InstalledMemory Mem5/128 - 159 MB RAM: ""
*InstalledMemory Mem6/160 - 191 MB RAM: ""
*InstalledMemory Mem7/³ 192 MB RAM: ""
*?InstalledMemory: "
  save
	currentsystemparams /RamSize get
	524288 div ceiling cvi 2 div
	/size exch def
	size 192 ge
	{(Mem7)}
	{size 160 ge
		{(Mem6)}
		{size 128 ge
			{(Mem5)}
			{size 96 ge
				{(Mem4)}
				{size 64 ge
					{(Mem3)}
					{size 40 ge
						{(Mem2)}
						{(Mem1)}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse = flush
  restore
"
*End
*CloseUI: *InstalledMemory

*OpenUI *HPOption_Duplexer/Duplex Printing Accessory: Boolean
*DefaultHPOption_Duplexer: False
*HPOption_Duplexer True/Installed: ""
*HPOption_Duplexer False/Not Installed: ""
*?HPOption_Duplexer: "
  save
   currentpagedevice /Duplex known
   {(True)}{(False)}ifelse = flush
  restore
"
*End
*CloseUI: *HPOption_Duplexer

*OpenUI *HPOption_PaperPolicy/Paper Matching: PickOne
*OrderDependency: 29 AnySetup *HPOption_PaperPolicy
*DefaultHPOption_PaperPolicy: Prompt
*HPOption_PaperPolicy Prompt/Prompt User for correct size: "
    <</DeferredMediaSelection true>> setpagedevice"
*End
*HPOption_PaperPolicy Scale/Nearest Size & Scale: "
    <</DeferredMediaSelection false>> setpagedevice
    <</Policies << /PageSize 3 >> >> setpagedevice"
*End
*HPOption_PaperPolicy Crop/Nearest Size & Crop: "
    <</DeferredMediaSelection false>> setpagedevice
    <</Policies << /PageSize 5 >> >> setpagedevice"
*End
*?HPOption_PaperPolicy: "
currentpagedevice /Policies get /PageSize get 5 eq {(Crop)}{(Prompt)} ifelse = flush
"
*End
*CloseUI: *HPOption_PaperPolicy

*CloseGroup: InstallableOptions

*% =================================
*% User Interface Constraints
*% =================================

*% If optional Duplexer is not installed, disable access to Duplex
*UIConstraints: *HPOption_Duplexer False *Duplex DuplexNoTumble
*UIConstraints: *HPOption_Duplexer False *Duplex DuplexTumble

*% Disable duplexer if insufficient memory available to use it
*UIConstraints: *InstalledMemory Mem1 *Duplex DuplexNoTumble
*UIConstraints: *InstalledMemory Mem1 *Duplex DuplexTumble

*%Constraints on Tray 3 if it is not installed
*UIConstraints: *HPOption_500_Sheet_Feeder_Tray3 False *InputSlot Tray3

*%Constraints on PageSize and InputSlot
*UIConstraints: *PageSize JB5 *InputSlot Tray2
*UIConstraints: *PageSize JB5 *InputSlot Tray3
*UIConstraints: *PageSize EnvISOB5 *InputSlot Tray2
*UIConstraints: *PageSize EnvISOB5 *InputSlot Tray3
*UIConstraints: *PageSize Env10 *InputSlot Tray2
*UIConstraints: *PageSize Env10 *InputSlot Tray3
*UIConstraints: *PageSize EnvC5 *InputSlot Tray2
*UIConstraints: *PageSize EnvC5 *InputSlot Tray3
*UIConstraints: *PageSize EnvDL *InputSlot Tray2
*UIConstraints: *PageSize EnvDL *InputSlot Tray3
*UIConstraints: *PageSize EnvMonarch *InputSlot Tray2
*UIConstraints: *PageSize EnvMonarch *InputSlot Tray3

*%Constraints on PageSize and Duplex
*UIConstraints: *PageSize A5 *Duplex DuplexNoTumble
*UIConstraints: *PageSize A5 *Duplex DuplexTumble
*NonUIConstraints: *CustomPageSize True *Duplex DuplexNoTumble
*NonUIConstraints: *CustomPageSize True *Duplex DuplexTumble
*UIConstraints: *PageSize EnvISOB5 *Duplex DuplexNoTumble
*UIConstraints: *PageSize EnvISOB5 *Duplex DuplexTumble
*UIConstraints: *PageSize Env10 *Duplex DuplexNoTumble
*UIConstraints: *PageSize Env10 *Duplex DuplexTumble
*UIConstraints: *PageSize EnvC5 *Duplex DuplexNoTumble
*UIConstraints: *PageSize EnvC5 *Duplex DuplexTumble
*UIConstraints: *PageSize EnvDL *Duplex DuplexNoTumble
*UIConstraints: *PageSize EnvDL *Duplex DuplexTumble
*UIConstraints: *PageSize EnvMonarch *Duplex DuplexNoTumble
*UIConstraints: *PageSize EnvMonarch *Duplex DuplexTumble

*% Fills not allowed with overlays
*UIConstraints: *HPwmSwitch Overlay *HPwmTextStyle Fill
*UIConstraints: *HPwmTextStyle Fill *HPwmSwitch Overlay
*% Halo style does not work with Watermarks
*UIConstraints: *HPwmSwitch Watermark *HPwmTextStyle Halo
*UIConstraints: *HPwmTextStyle Halo *HPwmSwitch Watermark

*% =================================
*% Media Selection
*% =================================
*LandscapeOrientation: Plus90
*VariablePaperSize: False
*OpenUI *PageSize: PickOne
*OrderDependency: 30 AnySetup *PageSize
*DefaultPageSize: Letter
*PageSize Letter/US Letter: "
	<</PageSize [612 792] /ImagingBBox null>> setpagedevice"
*End
*PageSize LetterSmall/US Letter (Small): "
	<</PageSize [612 792] /ImagingBBox null>> setpagedevice"
*End
*PageSize Legal/US Legal: "
	<</PageSize [612 1008] /ImagingBBox null>> setpagedevice"
*End
*PageSize LegalSmall/US Legal (Small): "
	<</PageSize [612 1008] /ImagingBBox null>> setpagedevice"
*End
*PageSize Executive/Executive: "
	<</PageSize [522 756] /ImagingBBox null>> setpagedevice"
*End
*PageSize A4/A4: "
	<</PageSize [595 842] /ImagingBBox null>> setpagedevice"
*End
*PageSize A4Small/A4 (Small): "
	<</PageSize [595 842] /ImagingBBox null>> setpagedevice"
*End
*PageSize A5/A5: "
	<</PageSize [420 595] /ImagingBBox null>> setpagedevice"
*End
*PageSize JB5/JB5: "
	<</PageSize [516 728] /ImagingBBox null>> setpagedevice"
*End
*PageSize EnvISOB5/Env ISO B5: "
	<</PageSize [499 709] /ImagingBBox null>> setpagedevice"
*End
*PageSize Env10/Env Comm10: "
	<</PageSize [297 684] /ImagingBBox null>> setpagedevice"
*End
*PageSize EnvC5/Env C5: "
	<</PageSize [459 649] /ImagingBBox null>> setpagedevice"
*End
*PageSize EnvDL/Env DL: "
	<</PageSize [312 624] /ImagingBBox null>> setpagedevice"
*End
*PageSize EnvMonarch/Env Monarch: "
	<</PageSize [279 540] /ImagingBBox null>> setpagedevice"
*End
*?PageSize: "
 save
   currentpagedevice /PageSize get aload pop
   2 copy gt {exch} if
   (Unknown)
  6 dict
   dup [612 792] (Letter) put
   dup [612 1008] (Legal) put
   dup [522 756] (Executive) put
   dup [595 842] (A4) put
   dup [420 595] (A5) put
   dup [516 728] (JB5) put
   dup [499 709] (EnvISOB5) put
   dup [297 684] (Env10) put
   dup [459 649] (EnvC5) put
   dup [312 624] (EnvDL) put
   dup [279 540] (EnvMonarch) put
 { exch aload pop 4 index sub abs 5 le exch
   5 index sub abs 5 le and
      {exch pop exit} {pop} ifelse
   } bind forall
   = flush pop pop
restore
"
*End
*CloseUI: *PageSize
*OpenUI *PageRegion:  PickOne
*OrderDependency: 30 AnySetup *PageRegion
*DefaultPageRegion: Letter
*PageRegion Letter/US Letter: "
	<</PageSize [612 792] /ImagingBBox null>> setpagedevice"
*End
*PageRegion LetterSmall/US Letter (Small): "
	<</PageSize [612 792] /ImagingBBox null>> setpagedevice"
*End
*PageRegion Legal/US Legal: "
	<</PageSize [612 1008] /ImagingBBox null>> setpagedevice"
*End
*PageRegion LegalSmall/US Legal (Small): "
	<</PageSize [612 1008] /ImagingBBox null>> setpagedevice"
*End
*PageRegion Executive/Executive: "
	<</PageSize [522 756] /ImagingBBox null>> setpagedevice"
*End
*PageRegion A4/A4: "
	<</PageSize [595 842] /ImagingBBox null>> setpagedevice"
*End
*PageRegion A4Small/A4 (Small): "
	<</PageSize [595 842] /ImagingBBox null>> setpagedevice"
*End
*PageRegion A5/A5: "
	<</PageSize [420 595] /ImagingBBox null>> setpagedevice"
*End
*PageRegion JB5/JB5: "
	<</PageSize [516 728] /ImagingBBox null>> setpagedevice"
*End
*PageRegion EnvISOB5/Env ISO B5: "
	<</PageSize [499 709] /ImagingBBox null>> setpagedevice"
*End
*PageRegion Env10/Env Comm10: "
	<</PageSize [297 684] /ImagingBBox null>> setpagedevice"
*End
*PageRegion EnvC5/Env C5: "
	<</PageSize [459 649] /ImagingBBox null>> setpagedevice"
*End
*PageRegion EnvDL/Env DL: "
	<</PageSize [312 624] /ImagingBBox null>> setpagedevice"
*End
*PageRegion EnvMonarch/Env Monarch: "
	<</PageSize [279 540] /ImagingBBox null>> setpagedevice"
*End
*CloseUI: *PageRegion

*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: Letter
*ImageableArea Letter/US Letter: 				"12.00 12.12 599.88 780.00"
*ImageableArea LetterSmall/US Letter (Small):	"30.00 31.00 582.00 761.00"
*ImageableArea Legal/US Legal: 					"12.00 12.12 599.88 996.00"
*ImageableArea LegalSmall/US Legal (Small):		"64.00 54.00 548.00 954.00"
*ImageableArea Executive/Executive: 			"12.00 12.12 509.88 744.00"
*ImageableArea A4/A4: 							"12.00 12.12 583.08 829.68"
*ImageableArea A4Small/A4 (Small): 				"28.00 30.00 566.00 811.00"
*ImageableArea A5/A5: 							"12.00 12.12 407.40 583.20"
*ImageableArea JB5/JB5: 					"12.00 12.12 503.88 715.92"
*ImageableArea EnvISOB5/Env ISO B5:				"12.00 12.12 486.60 696.48"
*ImageableArea Env10/Env Comm10:				"12.00 12.12 284.76 672.00"
*ImageableArea EnvC5/Env C5:					"12.00 12.12 447.00 636.96"
*ImageableArea EnvDL/Env DL:					"12.00 12.12 299.64 611.52"
*ImageableArea EnvMonarch/Env Monarch:			"12.00 12.12 266.76 528.00"
*?ImageableArea: "
 save
   /cvp { (                ) cvs print ( ) print } bind def
   /upperright {10000 mul floor 10000 div} bind def
   /lowerleft {10000 mul ceiling 10000 div} bind def
   newpath clippath pathbbox
   4 -2 roll exch 2 {lowerleft cvp} repeat
   exch 2 {upperright cvp} repeat flush
 restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: Letter
*PaperDimension Letter/US Letter: 				"612 792"
*PaperDimension LetterSmall/US Letter (Small):	"612 792 "
*PaperDimension Legal/US Legal: 				"612 1008"
*PaperDimension LegalSmall/US Legal (Small): 	"612 1008 "
*PaperDimension Executive/Executive: 			"522 756"
*PaperDimension A4/A4: 							"595 842"
*PaperDimension A4Small/A4 (Small): 			"595 842"
*PaperDimension A5/A5: 							"420 595"
*PaperDimension JB5/JB5: 						"516 728"
*PaperDimension EnvISOB5/Env ISO B5: 			"499 709"
*PaperDimension Env10/Env Comm10:				"297 684"
*PaperDimension EnvC5/Env C5: 					"459 649"
*PaperDimension EnvDL/Env DL: 					"312 624"
*PaperDimension EnvMonarch/Env Monarch: 		"279 540"
*RequiresPageRegion Tray1: True
*RequiresPageRegion Tray2: False
*RequiresPageRegion Tray3: False

*%=========================================
*%            Custom Paper Support
*%=========================================
*%Orientation and Margin (offsets) values are not utilized for cut sheet fed printer

*MaxMediaWidth: "612"
*MaxMediaHeight: "1002"
*CenterRegistered: False
*HWMargins: 16 16 16 16
*CustomPageSize True: "
        pop pop pop
        << /DeferredMediaSelection true
        /PageSize [ 7 -2 roll ]
        /ImagingBBox null
        >> setpagedevice
"
*End

*ParamCustomPageSize Width: 1 points 360 1002
*ParamCustomPageSize Height: 2 points 216 612
*ParamCustomPageSize Orientation: 3 int 0 0
*ParamCustomPageSize HeightOffset: 4 points 0 0
*ParamCustomPageSize WidthOffset: 5 points 0 0

*RequiresPageRegion All: True

*% ===================================
*% Gray Levels and Halftoning
*% ===================================
*ScreenFreq: "60.0"
*ScreenAngle: "45.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "
{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1
sub }{dup mul exch dup mul add 1 exch sub }ifelse }
"
*End
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub }"
*DefaultTransfer: Null
*Transfer Null: "{ }"
*Transfer Null.Inverse: "{ 1 exch sub }"

*% =================================
*% Print Color as Gray
*% Chose NOT to use standard *ColorModel keyword because color on or off is simpler
*% =================================
*OpenUI *HPColorAsGray/Print Color as Gray:  Boolean
*OrderDependency: 20 AnySetup *HPColorAsGray
*DefaultHPColorAsGray: False
*HPColorAsGray True/On: "<</ProcessColorModel /DeviceGray>> setpagedevice"
*HPColorAsGray False/Off: "<</ProcessColorModel /DeviceCMY>> setpagedevice"
*?HPColorAsGray: "
  save
    currentpagedevice /ProcessColorModel get
	/DeviceGray eq {(True)}{(False)}ifelse = flush
  restore
"
*End
*CloseUI: *HPColorAsGray

*% =================================
*% Media Handling Features
*% =================================
*% Media Input Source
*OpenUI *InputSlot/Paper Source: PickOne
*OrderDependency: 40 AnySetup *InputSlot
*DefaultInputSlot: Tray1
*InputSlot Tray1/Tray 1: "
	<</MediaPosition 3>> setpagedevice"
*End
*InputSlot Tray2/Tray 2: "
	<</MediaPosition 0>> setpagedevice"
*End
*InputSlot Tray3/Tray 3 (Optional): "
	<</MediaPosition 1>> setpagedevice"
*End
*?InputSlot: "
save
	currentpagedevice /InputAttributes get
	/Priority get
	aload pop pop
	/theTray exch def
	/theTray 0 eq {(Tray2)} {/theTray 1 eq {(Tray3)} {(Tray1)} ifelse} ifelse
	= flush
restore
"
*End
*CloseUI: *InputSlot

*% =================================
*% Media Types
*% =================================
*OpenUI *MediaType/Media Type: PickOne
*OrderDependency: 50 AnySetup *MediaType
*DefaultMediaType: Plain

*MediaType Plain/Plain:  "
    <</MediaType (Plain)>> setpagedevice"
*End
*MediaType Preprinted/Preprinted:  "
    <</MediaType (Preprinted)>> setpagedevice"
*End
*MediaType Letterhead/Letterhead:  "
    <</MediaType (Letterhead)>> setpagedevice"
*End
*MediaType Transparency/Transparency:  "
    <</MediaType (Transparency)>> setpagedevice"
*End
*MediaType Glossy/Glossy:  "
    <</MediaType (Gloss)>> setpagedevice"
*End
*MediaType Prepunched/Prepunched:  "
    <</MediaType (Prepunched)>> setpagedevice"
*End
*MediaType Labels/Labels:  "
    <</MediaType (Label)>> setpagedevice"
*End
*MediaType Bond/Bond:  "
    <</MediaType (Bond)>> setpagedevice"
*End
*MediaType Recycled/Recycled:  "
    <</MediaType (Recycled)>> setpagedevice"
*End
*MediaType Color/Color:  "
    <</MediaType (Color)>> setpagedevice"
*End
*MediaType Heavy/Heavy:  "
    <</MediaType (Heavy)>> setpagedevice"
*End
*MediaType Cardstock/Card Stock:  "
    <</MediaType (Card Stock)>> setpagedevice"
*End

*?MediaType: "
  save
    currentpagedevice /MediaType get
    dup null eq {pop (Unknown)} if
    = flush
  restore
"
*End
*CloseUI: *MediaType

*% =================================
*% Finish Mode
*% =================================
*OpenUI *HPGloss/Glossy Finish: Boolean
*OrderDependency: 120 AnySetup *HPGloss
*DefaultHPGloss: False
*HPGloss True/On: "
	<</GlossFinish true>> setpagedevice"
*End
*HPGloss False/Off: "
	<</GlossFinish false>> setpagedevice"
*End
*CloseUI: *HPGloss

*% ===================================
*% Two-sided Printing (Duplex)
*% ===================================
*OpenUI *Duplex/2-Sided Printing:  PickOne
*OrderDependency: 50 AnySetup *Duplex
*DefaultDuplex: None
*Duplex None/Off: "
	<</Duplex false /Tumble false>> setpagedevice"
*End
*Duplex DuplexNoTumble/Long-Edge Binding: "
	<</Duplex true /Tumble false>> setpagedevice"
*End
*Duplex DuplexTumble/Short-Edge Binding: "
	<</Duplex true /Tumble true>> setpagedevice"
*End
*?Duplex: "save
   currentpagedevice dup /Duplex known
     {dup /Duplex get
       {/Tumble get{(DuplexTumble)}{(DuplexNoTumble)}ifelse}
	   {pop (None)} ifelse
	 }
     {(None)} ifelse = flush
restore
"
*End
*CloseUI: *Duplex

*% ===================================
*% ColorSmart
*% ===================================
*OpenUI *HPColorSmart/ColorSmart II: PickOne
*OrderDependency: 100 AnySetup *HPColorSmart
*DefaultHPColorSmart: Automatic
*HPColorSmart Automatic/Automatic: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartTextAdjustment
	MatchScreen ColorSmartGraphicsAdjustment
	MatchScreen ColorSmartImageAdjustment
	Detail ColorSmartTextHalftone
	Smooth ColorSmartGraphicsHalftone
	Smooth ColorSmartImageHalftone
	/setscreen { pop pop pop} def
	/setcolorscreen { pop pop pop pop pop pop pop pop pop pop pop pop } def
	/sethalftone { pop } def
} if
"
*End
*HPColorSmart Manual/Manual: "
/setscreen { pop pop pop} def
/setcolorscreen { pop pop pop pop pop pop pop pop pop pop pop pop } def
/sethalftone { pop } def
"
*End
*CloseUI: *HPColorSmart

*% ==================================
*%  ColorSmart Manual Settings
*% ==================================
*OpenUI *HPCSText/Manual Text:  PickOne
*OrderDependency: 80 AnySetup *HPCSText
*DefaultHPCSText: MatchDetail
*HPCSText VividDetail/Vivid-Detail: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartTextAdjustment
	Detail ColorSmartTextHalftone
} if
"
*End
*HPCSText VividSmooth/Vivid-Smooth: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartTextAdjustment
	Smooth ColorSmartTextHalftone
} if
"
*End
*HPCSText MatchDetail/Calibrated-Detail: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartTextAdjustment
	Detail ColorSmartTextHalftone
} if
"
*End
*HPCSText MatchSmooth/Calibrated-Smooth: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartTextAdjustment
	Smooth ColorSmartTextHalftone
} if
"
*End
*CloseUI: *HPCSText

*OpenUI *HPCSGraphics/Manual Graphics:  PickOne
*OrderDependency: 80 AnySetup *HPCSGraphics
*DefaultHPCSGraphics: MatchSmooth
*HPCSGraphics VividDetail/Vivid-Detail: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartGraphicsAdjustment
	Detail ColorSmartGraphicsHalftone
} if
"
*End
*HPCSGraphics VividSmooth/Vivid-Smooth: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartGraphicsAdjustment
	Smooth ColorSmartGraphicsHalftone
} if
"
*End
*HPCSGraphics MatchDetail/Calibrated-Detail: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartGraphicsAdjustment
	Detail ColorSmartGraphicsHalftone
} if
"
*End
*HPCSGraphics MatchSmooth/Calibrated-Smooth: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartGraphicsAdjustment
	Smooth ColorSmartGraphicsHalftone
} if
"
*End
*CloseUI: *HPCSGraphics

*OpenUI *HPCSImages/Manual Image:  PickOne
*OrderDependency: 80 AnySetup *HPCSImages
*DefaultHPCSImages: MatchSmooth
*HPCSImages VividDetail/Vivid-Detail: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartImageAdjustment
	Detail ColorSmartImageHalftone
} if
"
*End
*HPCSImages VividSmooth/Vivid-Smooth: "
globaldict /ColorSmartColorMatching known {
	Vivid ColorSmartImageAdjustment
	Smooth ColorSmartImageHalftone
} if
"
*End
*HPCSImages MatchDetail/Calibrated-Detail: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartImageAdjustment
	Detail ColorSmartImageHalftone
} if
"
*End
*HPCSImages MatchSmooth/Calibrated-Smooth: "
globaldict /ColorSmartColorMatching known {
	MatchScreen ColorSmartImageAdjustment
	Smooth ColorSmartImageHalftone
} if
"
*End
*CloseUI: *HPCSImages

*% ===================================
*% CMYK Ink Model
*% ===================================
*OpenUI *HPCMYKInks/CMYK Inks: PickOne
*OrderDependency: 110 AnySetup *HPCMYKInks
*DefaultHPCMYKInks: Default
*HPCMYKInks Default/Fast: "
	<< /CMYKInkSet 0 >> setpagedevice
"
*End
*HPCMYKInks SWOP/SWOP: "
	<< /CMYKInkSet 1 >> setpagedevice
"
*End
*HPCMYKInks Euro/Eurostandard: "
	<< /CMYKInkSet 2 >> setpagedevice
"
*End
*HPCMYKInks Toyo/Toyo: "
	<< /CMYKInkSet 3 >> setpagedevice
"
*End
*CloseUI: *HPCMYKInks

*% =================================
*%  Watermark Printing
*% =================================
*OpenUI *HPwmSwitch/Watermark/Overlay:  PickOne
*OrderDependency: 10000 AnySetup *HPwmSwitch
*DefaultHPwmSwitch: Off
*HPwmSwitch Off/None: ""
*HPwmSwitch Watermark/Watermark: "
% Copyright (c) Hewlett-Packard Co 1997
/HPwm where { pop }{
  userdict begin
  true setglobal /HPwm 5 dict dup begin /HPwmOn true def end def false setglobal
  userdict /HPwmLocation known not {/HPwmLocation true def} if
  userdict /HPwmText known not {/HPwmText (Draft) def} if
  FontDirectory /HPwmFont known not {
    /Helvetica-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /MacEncoding where
    { pop /Encoding MacEncoding def }
    { /Encoding ISOLatin1Encoding def } ifelse
    currentdict
    end
    /HPwmFont exch definefont pop
  } if
  userdict /HPwmSize known not {/HPwmSize 48 def} if
  userdict /HPwmAngle known not {/HPwmAngle 45 def} if
  userdict /HPwmSaturation known not
  { /HPwmSaturation
    { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .55 mul } forall setcolor } def
  } if
  userdict /HPwmColor known not
  { /HPwmColor { 0 setgray HPwmSaturation } def
  } if
  userdict /HPwmStyle known not
  {/HPwmStyle { HPwmText false charpath HPwmColor .48 setlinewidth stroke } def
  } if
  end

  /HPwminitialize
	{ HPwm /HPwmOn get
	    { gsave
	      initmatrix
	      0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
	      currentpagedevice /PageSize get aload pop 2 div exch 2 div exch translate
	      HPwmAngle rotate
	      /por where {
	      	pop /por load dup type /booleantype eq { not { 90 rotate } if } if
	      } if
	      /HPwmFont HPwmSize selectfont
	      HPwmText stringwidth 2 div neg exch 2 div neg exch HPwmSize .25 mul sub moveto
	      HPwmStyle HPwmLocation not {true setglobal HPwm /HPwmOn false put false setglobal} if
	      grestore
	    } if
   } bind def

  /md where {
  	pop /initializepage where {
  		/LWinitializepage /initializepage load def
  		/initializepage { HPwminitialize LWinitializepage } put
  	}if
  } if

  /LWinitializepage where { pop }{
  <<
  /BeginPage
  { pop HPwminitialize } bind
  >> setpagedevice
  } ifelse
} ifelse"
*End
*HPwmSwitch Overlay/Overlay: "
% Copyright (c) Hewlett-Packard Co 1997
/HPwm where { pop }{
  userdict begin
  true setglobal /HPwm 5 dict dup begin /HPwmOn true def end def false setglobal
  userdict /HPwmLocation known not {/HPwmLocation true def} if
  userdict /HPwmText known not {/HPwmText (Draft) def} if
  FontDirectory /HPwmFont known not {
    /Helvetica-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /MacEncoding where
    { pop /Encoding MacEncoding def }
    { /Encoding ISOLatin1Encoding def } ifelse
    currentdict
    end
    /HPwmFont exch definefont pop
  } if
  userdict /HPwmSize known not {/HPwmSize 48 def} if
  userdict /HPwmAngle known not {/HPwmAngle 45 def} if
  userdict /HPwmSaturation known not
  { /HPwmSaturation
    { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .55 mul } forall setcolor } def
  } if
  userdict /HPwmColor known not
  { /HPwmColor { 0 setgray HPwmSaturation } def
  } if
  userdict /HPwmStyle known not
  {/HPwmStyle { HPwmText false charpath HPwmColor .48 setlinewidth stroke } def
  } if
 end

  <<
  /EndPage
    {
  	  2 eq { pop false }{
  		pop HPwm /HPwmOn get
	    { gsave
	      initmatrix
	      0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
	      currentpagedevice /PageSize get aload pop 2 div exch 2 div exch translate
	      HPwmAngle rotate
	      /por where {
	      	pop /por load dup type /booleantype eq { not { 90 rotate } if } if
	      } if
	      /HPwmFont HPwmSize selectfont
	      HPwmText stringwidth 2 div neg exch 2 div neg exch HPwmSize .25 mul sub moveto
	      HPwmStyle HPwmLocation not {true setglobal HPwm /HPwmOn false put false setglobal} if
	      grestore
	    } if
	    true
	  } ifelse
    } bind
  >> setpagedevice
} ifelse"
*End
*CloseUI: *HPwmSwitch

*% =================================
*%  Watermark Pages
*% =================================
*OpenUI *HPwmPages/Watermark Pages:  PickOne
*OrderDependency: 67 AnySetup *HPwmPages
*DefaultHPwmPages: AllPages
*HPwmPages AllPages/All: "userdict /HPwmLocation true put"
*HPwmPages FirstPage/First Only: "userdict /HPwmLocation false put"
*CloseUI: *HPwmPages

*% =================================
*%  Watermark Text
*% =================================
*OpenUI *HPwmTextMessage/Watermark Text:  PickOne
*OrderDependency: 65 AnySetup *HPwmTextMessage
*DefaultHPwmTextMessage: Draft
*HPwmTextMessage Draft/Draft: "userdict /HPwmText (Draft) put"
*HPwmTextMessage CompanyConfidential/Company Confidential: "userdict /HPwmText (Company Confidential) put"
*HPwmTextMessage CompanyProprietary/Company Proprietary: "userdict /HPwmText (Company Proprietary) put"
*HPwmTextMessage CompanyPrivate/Company Private: "userdict /HPwmText (Company Private) put"
*HPwmTextMessage Confidential/Confidential: "userdict /HPwmText (Confidential) put"
*HPwmTextMessage Copy/Copy: "userdict /HPwmText (Copy) put"
*HPwmTextMessage Copyright/Copyright: "userdict /HPwmText (Copyright) put"
*HPwmTextMessage FileCopy/File Copy: "userdict /HPwmText (File Copy) put"
*HPwmTextMessage Final/Final: "userdict /HPwmText (Final) put"
*HPwmTextMessage ForInternalUse/For Internal Use Only: "userdict /HPwmText (For Internal Use Only) put"
*HPwmTextMessage Preliminary/Preliminary: "userdict /HPwmText (Preliminary) put"
*HPwmTextMessage Proof/Proof: "userdict /HPwmText (Proof) put"
*HPwmTextMessage ReviewCopy/Review Copy: "userdict /HPwmText (Review Copy) put"
*HPwmTextMessage Sample/Sample: "userdict /HPwmText (Sample) put"
*HPwmTextMessage TopSecret/Top Secret: "userdict /HPwmText (Top Secret) put"
*HPwmTextMessage Urgent/Urgent: "userdict /HPwmText (Urgent) put"
*HPwmTextMessage Set/Custom: "userdict /HPwmText (Custom) put"
*CloseUI: *HPwmTextMessage
*% Allows LW 8.5.1 to use custom strings
*RBISetHPwmTextMessage Data: "(Custom) 50"
*RBISetHPwmTextMessage Code: "userdict /HPwmText 3 -1 roll put"

*% =================================
*%  Watermark Font
*% =================================
*OpenUI *HPwmFontName/Watermark Font:  PickOne
*OrderDependency: 65 AnySetup *HPwmFontName
*DefaultHPwmFontName: HelveticaB
*HPwmFontName CourierB/Courier Bold: "
  /Courier-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /MacEncoding where
    { pop /Encoding MacEncoding def }
    { /Encoding ISOLatin1Encoding def } ifelse
    currentdict
  end
  /HPwmFont exch definefont pop"
*End
*HPwmFontName HelveticaB/Helvetica Bold: "
  /Helvetica-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /MacEncoding where
    { pop /Encoding MacEncoding def }
    { /Encoding ISOLatin1Encoding def } ifelse
    currentdict
  end
  /HPwmFont exch definefont pop"
*End
*HPwmFontName TimesB/Times Bold: "
  /Times-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /MacEncoding where
    { pop /Encoding MacEncoding def }
    { /Encoding ISOLatin1Encoding def } ifelse
    currentdict
  end
  /HPwmFont exch definefont pop"
*End
*CloseUI: *HPwmFontName

*% =================================
*%  Watermark Size
*% =================================
*OpenUI *HPwmFontSize/Watermark Size (points):  PickOne
*OrderDependency: 65 AnySetup *HPwmFontSize
*DefaultHPwmFontSize: pt48
*HPwmFontSize pt24/24: "userdict /HPwmSize 24 put"
*HPwmFontSize pt30/30: "userdict /HPwmSize 30 put"
*HPwmFontSize pt36/36: "userdict /HPwmSize 36 put"
*HPwmFontSize pt42/42: "userdict /HPwmSize 42 put"
*HPwmFontSize pt48/48: "userdict /HPwmSize 48 put"
*HPwmFontSize pt54/54: "userdict /HPwmSize 54 put"
*HPwmFontSize pt60/60: "userdict /HPwmSize 60 put"
*HPwmFontSize pt66/66: "userdict /HPwmSize 66 put"
*HPwmFontSize pt72/72: "userdict /HPwmSize 72 put"
*HPwmFontSize pt78/78: "userdict /HPwmSize 78 put"
*HPwmFontSize pt84/84: "userdict /HPwmSize 84 put"
*HPwmFontSize pt90/90: "userdict /HPwmSize 90 put"
*CloseUI: *HPwmFontSize

*% =================================
*%  Watermark Angle
*% =================================
*OpenUI *HPwmTextAngle/Watermark Angle:  PickOne
*OrderDependency: 65 AnySetup *HPwmTextAngle
*DefaultHPwmTextAngle: Deg45
*HPwmTextAngle Deg90/90<A1>: "userdict /HPwmAngle 90 put"
*HPwmTextAngle Deg75/75<A1>: "userdict /HPwmAngle 75 put"
*HPwmTextAngle Deg60/60<A1>: "userdict /HPwmAngle 60 put"
*HPwmTextAngle Deg45/45<A1>: "userdict /HPwmAngle 45 put"
*HPwmTextAngle Deg30/30<A1>: "userdict /HPwmAngle 30 put"
*HPwmTextAngle Deg15/15<A1>: "userdict /HPwmAngle 15 put"
*HPwmTextAngle Deg0/0<A1>: "userdict /HPwmAngle 0 put"
*HPwmTextAngle DegN15/Ð15<A1>: "userdict /HPwmAngle -15 put"
*HPwmTextAngle DegN30/Ð30<A1>: "userdict /HPwmAngle -30 put"
*HPwmTextAngle DegN45/Ð45<A1>: "userdict /HPwmAngle -45 put"
*HPwmTextAngle DegN60/Ð60<A1>: "userdict /HPwmAngle -60 put"
*HPwmTextAngle DegN75/Ð75<A1>: "userdict /HPwmAngle -75 put"
*HPwmTextAngle DegN90/Ð90<A1>: "userdict /HPwmAngle -90 put"
*CloseUI: *HPwmTextAngle

*% =================================
*%  Watermark Style
*% =================================
*OpenUI *HPwmTextStyle/Watermark Style:  PickOne
*OrderDependency: 65 AnySetup *HPwmTextStyle
*DefaultHPwmTextStyle: Medium
*HPwmTextStyle Thin/Thin Outline: "userdict /HPwmStyle { HPwmText false charpath HPwmColor .24 setlinewidth stroke } bind put"
*HPwmTextStyle Medium/Medium Outline: "userdict /HPwmStyle { HPwmText false charpath HPwmColor .48 setlinewidth stroke } bind put"
*HPwmTextStyle Thick/Thick Outline: "userdict /HPwmStyle { HPwmText false charpath HPwmColor .96 setlinewidth stroke } bind put"
*HPwmTextStyle Halo/Thick Outline with Halo: "userdict /HPwmStyle
     { HPwmText false charpath gsave /DeviceGray setcolorspace 1 setgray 1.8 setlinewidth stroke grestore
     HPwmColor .96 setlinewidth stroke } bind put"
*End
*HPwmTextStyle Fill/Filled: "userdict /HPwmStyle { HPwmColor HPwmText show } bind put"
*CloseUI: *HPwmTextStyle

*% =================================
*%  Watermark Color
*% =================================
*OpenUI *HPwmTextColor/Watermark Color:  PickOne
*OrderDependency: 64 AnySetup *HPwmTextColor
*DefaultHPwmTextColor: Black
*HPwmTextColor Black/Gray: "userdict /HPwmColor { 0 setgray HPwmSaturation } bind put"
*HPwmTextColor Red/Red: "userdict /HPwmColor { /DeviceCMYK setcolorspace 0 1 .3 0 setcolor HPwmSaturation } bind put"
*HPwmTextColor Orange/Orange: "userdict /HPwmColor { /DeviceCMYK setcolorspace 0 .5 1 0 setcolor HPwmSaturation } bind put"
*HPwmTextColor Yellow/Yellow: "userdict /HPwmColor { /DeviceCMYK setcolorspace 0 0 1 0 setcolor HPwmSaturation } bind put"
*HPwmTextColor Green/Green: "userdict /HPwmColor { /DeviceCMYK setcolorspace .9 0 .9 0 setcolor HPwmSaturation } bind put"
*HPwmTextColor Blue/Blue: "userdict /HPwmColor { /DeviceCMYK setcolorspace 1 .1 0 0 setcolor HPwmSaturation } bind put"
*HPwmTextColor Purple/Violet: "userdict /HPwmColor { /DeviceCMYK setcolorspace .8 .8 0 0 setcolor HPwmSaturation } bind put"
*CloseUI: *HPwmTextColor

*% =================================
*%  WaterMark Brightness
*% =================================
*OpenUI *HPwmBrightness/Watermark Intensity:  PickOne
*OrderDependency: 63 AnySetup *HPwmBrightness
*DefaultHPwmBrightness: Medium
*HPwmBrightness Darkest/Darkest:          "userdict /HPwmSaturation { null pop } put"
*HPwmBrightness Darker/Darker:            "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .88 mul } forall setcolor } put"
*HPwmBrightness Dark/Dark:                "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .77 mul } forall setcolor } put"
*HPwmBrightness MediumDark/Medium Dark:   "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .66 mul } forall setcolor } put"
*HPwmBrightness Medium/Medium:            "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .55 mul } forall setcolor } put"
*HPwmBrightness MediumLight/Medium Light: "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .44 mul } forall setcolor } put"
*HPwmBrightness Light/Light:              "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .33 mul } forall setcolor } put"
*HPwmBrightness Lighter/Lighter:          "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .22 mul } forall setcolor } put"
*HPwmBrightness Lightest/Lightest:        "userdict /HPwmSaturation { [ currentcmykcolor ] /DeviceCMYK setcolorspace { .11 mul } forall setcolor } put"
*CloseUI: *HpwmBrightness

*% =================================
*%  Control
*% =================================
*DefaultResolution: 600dpi
*Resolution 600dpi: ""
*?Resolution: "
  save
    currentpagedevice /HWResolution get
    0 get
    (          ) cvs print
    (dpi)
    = flush
  restore
"
*End

*% =================================
*% Specials for Quark
*% =================================
*QRKDoNonLocalDCS: False
*QRKCustomHalftone HP/HP Color LaserJet 4500: ""

*% =================================
*% Font Information
*% =================================
*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.006S)" Standard ROM
*Font AvantGarde-BookOblique: Standard "(001.006S)" Standard ROM
*Font AvantGarde-Demi: Standard "(001.007S)" Standard ROM
*Font AvantGarde-DemiOblique: Standard "(001.007S)" Standard ROM
*Font Bookman-Demi: Standard "(001.004S)" Standard ROM
*Font Bookman-DemiItalic: Standard "(001.004S)" Standard ROM
*Font Bookman-Light: Standard "(001.004S)" Standard ROM
*Font Bookman-LightItalic: Standard "(001.004S)" Standard ROM
*Font Courier: Standard "(002.004S)" Standard ROM
*Font Courier-Bold: Standard "(002.004S)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.004S)" Standard ROM
*Font Courier-Oblique: Standard "(002.004S)" Standard ROM
*Font Helvetica: Standard "(001.006S)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Bold: Standard "(001.009S)" Standard ROM
*Font NewCenturySchlbk-BoldItalic: Standard "(001.007S)" Standard ROM
*Font NewCenturySchlbk-Italic: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Roman: Standard "(001.007S)" Standard ROM
*Font Palatino-Bold: Standard "(001.005S)" Standard ROM
*Font Palatino-BoldItalic: Standard "(001.005S)" Standard ROM
*Font Palatino-Italic: Standard "(001.005S)" Standard ROM
*Font Palatino-Roman: Standard "(001.005S)" Standard ROM
*Font Symbol: Special "(001.007S)" Special ROM
*Font Times-Bold: Standard "(001.007S)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009S)" Standard ROM
*Font Times-Italic: Standard "(001.007S)" Standard ROM
*Font Times-Roman: Standard "(001.007S)" Standard ROM
*Font ZapfChancery-MediumItalic: Standard "(001.007S)" Standard ROM
*Font ZapfDingbats: Special "(001.004S)" Special ROM
*Font Albertus-ExtraBold: Standard "(001.008S)" Standard ROM
*Font Albertus-Medium: Standard "(001.008S)" Standard ROM
*Font AntiqueOlive: Standard "(001.008S)" Standard ROM
*Font AntiqueOlive-Bold: Standard "(001.008S)" Standard ROM
*Font AntiqueOlive-Italic: Standard "(001.008S)" Standard ROM
*Font Arial: Standard "(001.008S)" Standard ROM
*Font Arial-Bold: Standard "(001.008S)" Standard ROM
*Font Arial-BoldItalic: Standard "(001.008S)" Standard ROM
*Font Arial-Italic: Standard "(001.008S)" Standard ROM
*Font CGOmega: Standard "(001.008S)" Standard ROM
*Font CGOmega-Bold: Standard "(001.008S)" Standard ROM
*Font CGOmega-BoldItalic: Standard "(001.008S)" Standard ROM
*Font CGOmega-Italic: Standard "(001.008S)" Standard ROM
*Font CGTimes: Standard "(001.008S)" Standard ROM
*Font CGTimes-Bold: Standard "(001.008S)" Standard ROM
*Font CGTimes-BoldItalic: Standard "(001.008S)" Standard ROM
*Font CGTimes-Italic: Standard "(001.008S)" Standard ROM
*Font Clarendon-Condensed-Bold: Standard "(001.008S)" Standard ROM
*Font Coronet: Standard "(001.008S)" Standard ROM
*Font CourierHP: Standard "(001.008S)" Standard ROM
*Font CourierHP-Bold: Standard "(001.008S)" Standard ROM
*Font CourierHP-BoldItalic: Standard "(001.008S)" Standard ROM
*Font CourierHP-Italic: Standard "(001.008S)" Standard ROM
*Font Garamond-Antiqua: Standard "(001.008S)" Standard ROM
*Font Garamond-Halbfett: Standard "(001.008S)" Standard ROM
*Font Garamond-Kursiv: Standard "(001.008S)" Standard ROM
*Font Garamond-KursivHalbfett: Standard "(001.008S)" Standard ROM
*Font LetterGothic: Standard "(001.008S)" Standard ROM
*Font LetterGothic-Bold: Standard "(001.008S)" Standard ROM
*Font LetterGothic-Italic: Standard "(001.008S)" Standard ROM
*Font Marigold: Standard "(001.008S)" Standard ROM
*Font SymbolMT: Standard "(001.008S)" Standard ROM
*Font TimesNewRoman: Standard "(001.008S)" Standard ROM
*Font TimesNewRoman-Bold: Standard "(001.008S)" Standard ROM
*Font TimesNewRoman-BoldItalic: Standard "(001.008S)" Standard ROM
*Font TimesNewRoman-Italic: Standard "(001.008S)" Standard ROM
*Font Univers-Bold: Standard "(001.008S)" Standard ROM
*Font Univers-BoldItalic: Standard "(001.008S)" Standard ROM
*Font Univers-Condensed-Bold: Standard "(001.008S)" Standard ROM
*Font Univers-Condensed-BoldItalic: Standard "(001.008S)" Standard ROM
*Font Univers-Condensed-Medium: Standard "(001.008S)" Standard ROM
*Font Univers-Condensed-MediumItalic: Standard "(001.008S)" Standard ROM
*Font Univers-Medium: Standard "(001.008S)" Standard ROM
*Font Univers-MediumItalic: Standard "(001.008S)" Standard ROM
*Font Wingdings-Regular: Standard "(001.008S)" Standard ROM
*?FontQuery: "
 save
   { count 1 gt
      { exch dup 127 string cvs (/) print print (:) print
        /Font resourcestatus {pop pop (Yes)} {(No)} ifelse =
      } { exit } ifelse
   } bind loop
   (*) = flush
 restore
"
*End
*?FontList: "
save
  (*) {cvn ==} 128 string /Font resourceforall
  (*) = flush
restore
"
*End

*% ===================================
*% Printer Messages
*% ===================================

*% Printer Messages (verbatim from printer):
*Message: "%%[exitserver: permanent state may be changed]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ] %%)
*Status: "warming up"/warming up
*Status: "initializing"/initializing
*Status: "idle"/idle
*Status: "waiting"/waiting
*Status: "busy"/busy
*Status: "printing"/printing
*Status: "printing test page"/printing test page
*Status: "PrinterError: needs attention"/PrinterError: needs attention
*Status: "PrinterError: cover open"/PrinterError: cover open
*Status: "PrinterError: no toner cartridge"/PrinterError: no toner cartridge
*Status: "PrinterError: manual feed"/PrinterError: manual feed
*Status: "PrinterError: out of paper"/PrinterError: out of paper
*Status: "PrinterError: Paper Jam"/PrinterError: Paper Jam
*Status: "PrinterError: page protect needed"/PrinterError: page protect needed
*Status: "PrinterError: out of memory"/PrinterError: out of memory
*Status: "PrinterError: output bin full"/PrinterError: output bin full
*Status: "PrinterError: resetting printer"/PrinterError: resetting printer
*Status: "PrinterError: toner is low"/PrinterError: toner is low
*Status: "PrinterError: off line"/PrinterError: off line

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "other I/O"/other I/O
*Source: "AppleTalk"/AppleTalk
*Source: "APPLETALK"/AppleTalk
*Source: "ATALK"/AppleTalk
*Source: "LocalTalk"/LocalTalk
*Source: "Parallel"/Parallel
*Source: "EtherTalk"/EtherTalk
*Source: "NOVELL"/NOVELL
*Source: "DLC/LLC"/DLC/LLC
*Source: "ETALK"/EtherTalk
*Source: "TCP/IP"/TCP/IP

*% PrinterError (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "needs attention"/needs attention
*PrinterError: "cover open"/cover open
*PrinterError: "no toner cartridge"/no toner cartridge
*PrinterError: "manual feed"/manual feed
*PrinterError: "out of paper"/out of paper
*PrinterError: "Paper Jam"/Paper Jam
*PrinterError: "page protect needed"/page protect needed
*PrinterError: "out of memory"/out of memory
*PrinterError: "output bin full"/output bin full
*PrinterError: "resetting printer"/resetting printer
*PrinterError: "toner is low"/toner is low
*PrinterError: "off line"/off line

*% =================================
*% Color Separation Information
*% =================================
*ContoneOnly: True

*% =================================
*% System Management
*% =================================
*FreeVM: "6701488"
*VMOption Mem1/32 - 39 MB RAM: "6701488"
*VMOption Mem2/40 - 63 MB RAM: "13027208"
*VMOption Mem3/64 - 95 MB RAM: "34942260"
*VMOption Mem4/96 - 127 MB RAM: "65283608"
*VMOption Mem5/128 - 159 MB RAM: "99528700"
*VMOption Mem6/160 - 191 MB RAM: "128460116"
*VMOption Mem7/³ 192 MB RAM: "159631164"

*%DeviceAdjustMatrix: "[1 0 0 1 0 0]"
*SuggestedJobTimeout: "0"
*SuggestedWaitTimeout: "300"
*Password: "()"
*ExitServer: "
 count 0 eq
 { false } { true exch startjob } ifelse
 not {
     (WARNING: Cannot modify initial VM.) =
     (Missing or invalid password.) =
     (Please contact the author of this software.) = flush quit
     } if
"
*End
*Reset: "
 count 0 eq
 { false } { true exch startjob } ifelse
 not {
    (WARNING: Cannot reset printer.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
    } if
 systemdict /quit get exec
 (WARNING: Cannot reset printer.) = flush
"
*End

*% =================================
*% For "HP Color LaserJet 4500"
*% =================================
