#
# urlfetch.itk
# Copyright 1995--2002, Trinity College Computing Center.
# Written by David Chappell.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Last modified 26 August 2002.
#

package require Tcl 8.3
package require Tk 8.3
package require http 2.3
package require Itcl 3.1

#-----------------------------------------------------------
# This object manages the HTTP connections and may someday
# include a cache.
#
# It also has a lame implementation of file: URLs for GET.
# It is only there to support the browser_test.tcl script.
#-----------------------------------------------------------
itcl::class urlfetch {
  protected variable token_commands

  public method get {url command} {
    puts "url::get $url $command"
    if [regexp {^file://(/.*)$} $url junk filename] {
	set stream [open $filename r]
	set data [read $stream]
	close $stream
	$command 200 OK text/html $data
	} else {
	set token [::http::geturl $url -command [list $this callback]]
	set token_commands($token) $command
	}
    }

  public method post {url data command} {
    puts "url::post $url $data $command"
    set token [::http::geturl $url -query $data -command [list $this callback]]
    set token_commands($token) $command
    }

  public method callback {token} {
    if [ catch {
	upvar #0 $token state

	set code -1
	set message "unknown"
	switch -- $state(status) {
	    ok {
	      regexp {^HTTP/[0-9]+\.[0-9]+ ([0-9]+) (.*)$} $state(http) match code message
	      }
	    eof {
	      set message "eof"
	      }
	    error {
	      set $state(error)
	      }
	    }

	set content_type "application/octet-stream"
	array set meta $state(meta)
	if [info exists meta(Content-Type)] {
	  set content_type $meta(Content-Type)
	  }

	$token_commands($token) $code $message $content_type $state(body)

	::http::cleanup $token
	} result] { puts $result }
    }
  }

# end of file
