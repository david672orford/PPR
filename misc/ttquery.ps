%!PS-Adobe-3.0 Query
%
% mouse:~ppr/src/misc/ttquery.ps
% Copyright 1995--1999, Trinity College Computing Center.
% Written by David Chappell.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that
% copyright notice and this permission notice appear in supporting
% documentation.  This software is provided "as is" without express or
% implied warranty.
%
% Last modified 25 December 1999.
%

%
% This commentary contains an excerpt from the LaserWriter 8.1.1 driver.
% LaserWriter 8.1.1 is copyright 1993, Apple Computer, Inc., and
% copyright 1993, Adobe Systems, Inc.  The appearance of the excerpt here
% should be considered fair use since the part reproduced is a small
% fraction of the whole and it is reproduced for purposes of critical
% analysis.  The formatting and comments are mine.
%

%
% LaserWriter 8 sends a block of code to the printer before it sends the
% document.  This block of code consists of queries.  A query is a fragment
% of PostScript code which examines the machine it is running on (the
% printer) and prints some information about it on the output channel.
%
% The query we are interested in begins with this line:
%
%%?BeginFeatureQuery: *TTRasterizer

% First, the state of the PostScript interpreter is saved so that
% any garbage left by this code fragment can be clean up.
save

% First we will try to determine if the printer understands type 42
% fonts.  First we will try to determine this using the new
% facilities for this purpose.
%
% The "true" below is a silly if condition.  Perhaps it was used
% for testing.
true

	% This is always executed, that is what is so silly.
	{
	% If the resourcestatus operator is available, as it
	% is in Level 2 printers, use it to find out if
	% type 42 fonts are known to this interpreter.
	systemdict /resourcestatus known
		{
		42 /FontType resourcestatus
			% Resource exists, pop size and status,
			% put false on the stack, and print the
			% query result.  We will leave false
			% on the stack so that testing will
			% not continue.
			{pop pop false (Type42) =}
			% Otherwise, continue testing
			{true}
		ifelse
		}

		% The resourcestatus operator is not available,
		% "true" means continue with testing.
		{
		true
		}
	ifelse
	}

	% This is never executed
	{
	false
	}

ifelse

% If above operations left "true" on the stack, we
% should continue testing.  If it left "false" on the stack
% it indicates that the above code has already determined that
% the interpreter can use type 42 fonts and the above code has
% already emmited the message which says so.  That is why we need
% not continue testing if "false" is on the stack.
{

% An if condition:

% First, retrieve the product string from systemdict and leave "true" on
% the  stack if the printer is not one of the two named.
statusdict begin product end
dup (LaserWriter) ne exch (LaserWriter Plus) ne and

% Make sure eexec and cexec are also available.
systemdict/eexec known and
systemdict/cexec known and

% At this point we have "true" on the stack the printer is not a very early
% LaserWriter and "eexec" and "cexec" are both available.
	{
	countdictstack		% Count dictionaries for later clean up.
	mark			% Mark argument stack for later clean up.
	false

	% Execute this encrypted code in a stopped context.
	% Presumably it will only execute properly on printers
	% which can also execute the 68000 TT rasterizer.
	<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
	2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
	C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
	{eexec} stopped

	% If stopped returned false, indicating an error in the code,
		{
		cleartomark	% clean stack

		% Remove any dictionaries which the code put on
		% the stack.
		countdictstack exch sub dup 0 gt
			{{end}repeat}
			{pop}
		ifelse

		false	% Leave "false" on the stack.
		}

	% If no error, clean up but preserve the boolean value on
	% top of the stack
		{
			{cleartomark pop true}
			{cleartomark pop false}
		ifelse
		}
	ifelse
	}

% This is where we land if we have an early LaserWriter or eexec or cexec
% is unavailable.  This will eventually result in the revelation that there
% is no way to print type 42 fonts directly on this printer.
	{
	false
	}
ifelse

% If the eexec code left true on the stack, say that we can
% accept have a 68000 series processor.
	{false (Accept68K)= }
% Otherwise, arrange to have "None" printed.
	{true}
ifelse

% This is the end of an block which is executed if Type 42 font
% support is not detected at the very begining.
}

% Type 42 font support was detected at the very begining, put false on the
% stack so that "None" will not be printed below.
{
false
}
ifelse

% If true is on the stack, print "None".  This will happen if we are
% printing on an "LaserWriter" or "LaserWriter II" or if "eexec" does
% not exist, or if "cexec" does not exist, or if the eexec code block
% failed.  It will not happen if the first test detected a built in
% TrueType rasterizer.
	{(None)=}
if

% Clean up after the query.
restore

% This lines is inserted so that spooler will know where the query ends.
%%?EndFeatureQuery: Unknown

% This line contains a call to an undefined PostScript procedure.  This is
% done to prevoke a PostScript error.  If you print this file with PPR,
% the job will be arrested and you can read its output by examining the
% job log.
x

%%EOF
