#! /usr/bin/perl -w
#
# Last modified 8 November 2002.
#

#
# This program is used to run PPR regression tests.  It should be invoked
# once for each set of tests to be run.  The set of tests to be run should
# be indicated by a single command line parameter which indicates the
# directory containing the tests.
#

#
# Run a test.
#
sub do_test
    {
    my $test_basename = shift;

    print "$test_basename\n";

    $ENV{TEST_BASENAME} = $test_basename;

    if( system("${test_basename}.run >${test_basename}.out 2>&1") )
	{
	print "UNTESTED test code failed\n";
	return 1;
	}

    if( ! -f "${test_basename}.ok" )
	{
	print "UNTESTED ${test_basename}.ok missing\n";
	return 1;
	}

    open(DIFF, "diff -c ${test_basename}.ok ${test_basename}.out |") || die;
    my $diff_output = "";
    my $diff_line;
    while($diff_line=<DIFF>)
	{ $diff_output .= $diff_line }
    close(DIFF);

    if($diff_output ne "")
	{
	print $diff_output;
	print "FAIL\n";
	return 1;
	}
    else
	{
	print "PASS\n";
	return 0;
	}
    }

#
# Main
#
$ENV{HOMEDIR} = "/usr/lib/ppr";
$ENV{SHAREDIR} = "/usr/share/ppr";
$ENV{CONFDIR} = "/etc/ppr";
$ENV{VAR_SPOOL_PPR} = "/var/spool/ppr";
$ENV{TEMPDIR} = "/tmp";

delete $ENV{LANG};
delete $ENV{LANGUAGE};
delete $ENV{LC_MESSAGES};

$ENV{TESTBIN} = "$ENV{HOMEDIR}/src/tests/tools";
$ENV{REGTEST_INTERFACE_OUTPUT} = "$ENV{TEMPDIR}/regtest_interface_output";

(-d $ENV{TESTBIN}) || die;

$stop = 0;
while(defined($ARGV[0]) && $ARGV[0] =~ /^--/)
    {
    my $option = shift @ARGV;
    if($option eq "--stop")
    	{ $stop = 1 }
    else
    	{ die "Unrecognized option:  $option\n" }
    }

if($#ARGV < 0)
    {
    die "Usage: [--stop] do_test _testdir_\n";
    }

my $total_tests = 0;
my $total_groups = 0;
my $total_failures = 0;
while(defined($TESTDIR = shift @ARGV))
    {
    opendir(TESTS, $TESTDIR) || die "Can't open directory \"$TESTDIR\", $!\n";
    $total_groups++;

    my @test_list = ();
    while($test = readdir(TESTS))
        {
        if($test =~ /^(.+)\.run$/)
            {
            push(@test_list, $1);
            }
        }

    closedir(TESTS) || die;

    my $test;
    foreach $test (sort(@test_list))
        {
	$total_tests++;
        my $result = do_test("$TESTDIR/$test");
        print "\n";
        $total_failures += $result;
        exit 1 if($result && $stop);
        }
    }

print "Ran $total_groups group(s) of tests, $total_tests individual test(s), $total_failures failure(s).\n";

exit(($total_failures > 0) ? 2 : 0);

