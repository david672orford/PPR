<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">

<Article>

<Articleinfo>
	<Title>The PPR Hackers Guide</Title>
	<AUTHOR>
		<FirstName>David</firstname>
		<surname>Chappell</surname>
		</AUTHOR>
	<PubDate>14 January 2002</pubdate>
	<copyright>
		<year>1995--2002</year>
		<holder>Trinity College Computing Center</holder>
		</copyright>
</articleinfo>

<Abstract>
<Para>
This is one of the four parts of the documentation for PPR version 1.50.  The
other parts are <Emphasis remap="it">Installing and Using PPR</Emphasis>,
<Emphasis remap="it">PPR, a Print Spooler for PostScript</Emphasis>,
and the PPR man pages.
This part provides information needed for hacking PPR.  This includes adding
plugin modules such as printer interface programs and programs that send
messages to users.
</Para>
</Abstract>

<Sect1>
<Title>The PPR Hacker's Guide</Title>

</Sect1>

<Sect1>
<Title>Directories and Files</Title>

<Para>
This section describes the directory structure found within PPR's home
directory (<Literal remap="tt">/usr/ppr</Literal>), in its spooling directory,
(<Literal remap="tt">/var/spool/ppr</Literal>) and in its configuration directory
(<Literal remap="tt">/etc/ppr</Literal>).
</Para>

<Sect2>
<Title>The <Literal remap="tt">/var/spool/ppr/queue</Literal> Directory</Title>

<Para>
The <Literal remap="tt">/var/spool/ppr/queue</Literal> directory contains one file for each print
job currently in the queue.  Each file name is the same as the queue id of the
job is describes.  These files are created by the program <Emphasis remap="bf">ppr</Emphasis> and removed
by the print daemon <Emphasis remap="bf">pprd</Emphasis> when the job has been printed or is canceled.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/var/spool/ppr/jobs</Literal> Directory</Title>

<Para>
The <Literal remap="tt">/var/spool/ppr/jobs</Literal> directory contains three to five files for
each job currently in the queue.
</Para>

<Para>
The first part of each file name is the queue id of the job.  The file whose
name ends in ``<Literal remap="tt">-comments</Literal>'' contains any header and trailer comment lines
which have not been removed and represented by parameters in the file in the
queue directory.
</Para>

<Para>
The file whose name ends in ``<Literal remap="tt">-pages</Literal>'' contains the text of the document
default section, if it exists, and a list of the pages in the document.  The
record for each page includes the offset in the ``<Literal remap="tt">-text</Literal>'' file at which it
begins and any page header and trailer comments for that page.
</Para>

<Para>
The file whose name ends in ``<Literal remap="tt">-text</Literal>'' contains most of the text of the
job.  If the <Emphasis remap="bf">-S true</Emphasis> switch was used when <Emphasis remap="bf">ppr</Emphasis> was invoked, then
resources will be missing from this file, having been stript out and replaced
by comments which will later be used to put them back.
</Para>

<Para>
The files with names ending in ``<Literal remap="tt">-log</Literal>'' contain the print job logs.  If
<Emphasis remap="bf">ppr</Emphasis> was invoked with the <Emphasis remap="bf">-w log</Emphasis> switch then any warnings will be in
this file.  Any text received from the printer, including printer error
messages, will also be in this file.  Messages which explain why the job was
routed away from a particular printer will be in this file, but each line of
such messages will begin with a "+".  Whenever a banner or trailer page is
printed, the contents of the log file  is printed and the log file is deleted.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/var/spool/ppr/printers/alerts</Literal> Directory</Title>

<Para>
Each time a fault message is generated for a printer, it is appended to a
file in this directory.  There is one file for each printer.  If the file is
more than one hour old, the file is truncated to zero length before writing the
new alert instead of appending.  This ensures that only recent messages will be
sent to the operator.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/var/spool/ppr/printers/status</Literal> Directory</Title>

<Para>
This file may contain one file for each printer.  If present, the file
contains the last status message received from the printer.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/var/spool/ppr/logs</Literal> Directory</Title>

<Para>
This directory contains log files.  Error messages may be written in these
log files when PPR component fail.  If this directory contains the file
<Literal remap="tt">printlog</Literal>, PPR will append a line for each file printed.  (See Appendix
<XRef LinkEnd="printlog">.)
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/etc/ppr</Literal> Directory</Title>

<Para>
This directory contains a number of configuration files.  In also contains
subdirectories which will be described in later sections.
</Para>

<Para>
The file <Literal remap="tt">papsrv.conf</Literal> is descibed in the papsrv.conf(5) man page.
</Para>

<Para>
The purpose of <Literal remap="tt">newprn.conf</Literal> is explained in Appendix <XRef LinkEnd="printer-config">.
</Para>

<Para>
The file <Literal remap="tt">smb-include.conf</Literal> is a segment of Samba configuration file.  It
is generated by the program <Emphasis remap="bf">ppr2samba</Emphasis>.  The file <Literal remap="tt">printcap</Literal> is also
generated by <Emphasis remap="bf">ppr2samba</Emphasis> but it is obsolete and will be eliminated in a
future release of PPR.
</Para>

<Para>
The file <Literal remap="tt">charge&lowbar;users.db</Literal> is the user charge accounts database.  The
program <Emphasis remap="bf">ppuser</Emphasis> can be used to read and modify this file.
</Para>

<Para>
The documentation for the file <Literal remap="tt">lw-messages.conf</Literal> can be found in
<Literal remap="tt">lw-messages.conf.sample</Literal>.
</Para>

<Para>
The file <Literal remap="tt">media.db</Literal> is the list of known media
types.  It is consulted
by <COMMAND>ppr</COMMAND> and <COMMAND>pprdrv</COMMAND>.  It may be read
and modified by the
<command>ppad media</COMMAND> series of commands.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/etc/ppr/printers</Literal> Directory</Title>

<Para>
There is one file in this directory for each printer.  Each file has the
same name as the printer it describes.  The format of one of these files is
described in Appendix <XRef LinkEnd="printer-config">.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/etc/ppr/groups</Literal> Directory</Title>

<Para>
There is one file in this directory for each group.  Each file has the same
name as the group it describes.  The format of these files is described in
Appendix <XRef LinkEnd="group-config">.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/etc/ppr/mounted</Literal> Directory</Title>

<Para>
This directory contains one file for each printer.  Each file contains a
list of a printer's bins and the medium mounted on each bin.  This file is
created by the main print daemon <Emphasis remap="bf">pprd</Emphasis>.  When <Emphasis remap="bf">pprd</Emphasis> starts up it looks
in this directory to determine what media was mounted last time it was
running.  It automatically re-mounts all those media.
</Para>

<Para>
The program <Emphasis remap="bf">pprdrv</Emphasis> also uses this file in order to select bins for
printing banner pages and to automatically select bins for print jobs according
to their required media.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/interfaces</Literal> Directory</Title>

<Para>
Each file in this directory is a program which is responsible for making
contact with any printer which has a particular kind of interface.  For
instance, <Literal remap="tt">interfaces/atalk</Literal> is used to communicate with printers
connected through Apple's Printer Access Protocol.  The requirements imposed on
such an interface program are described in Appendix <XRef LinkEnd="interfaces2">.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/responders</Literal> Directory</Title>

<Para>
Each file in the <Literal remap="tt">responders</Literal> directory is a program which can be used to
attempt to send a message to the user who submitted the job.  A responder
program is selected at the time the user invokes <Emphasis remap="bf">ppr</Emphasis>, by using the <Emphasis remap="bf">-m</Emphasis>
switch.  The parameter for the <Emphasis remap="bf">-m</Emphasis> switch is the name of the program in the
<Literal remap="tt">responders</Literal> directory which should be used.  If the <Emphasis remap="bf">-m</Emphasis> switch is not
used, the default responder, <Emphasis remap="bf">write</Emphasis>, is used.  (You can change the default
by setting the environment variable PPR&lowbar;RESPONDER.)  The manner in which a
responder is invoked is described in Appendix <XRef LinkEnd="responders">.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/filters</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/commentators</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/fonts</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/man</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/cgi-bin</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/www</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/cache</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/install</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/locale</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/speach</Literal> Directory</Title>
<para>[This section hasn't been written yet.[</para>
</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/bin</Literal> Directory</Title>

<Para>
This directory contains
the program <command>ppr</command> which submits jobs,
various utility programs such as <command>ppop</command> and <command>ppad</command>,
the PPR daemons <command>pprd</command>,
and the <command>papsrv</command>.
</Para>

</Sect2>

<Sect2>
<Title>The <Literal remap="tt">/usr/ppr/lib</Literal> Directory</Title>

<Para>
This directory contains <command>pprdrv</command> and as well as other
programs a user
or administrator wouldn't normally execute directly.  It also contains
some configuration files which even a system administrator wouldn't
ordinarily modify.  These files would be modified by people who are creating
new components for PPR.
</Para>

<Para>
The documenation for the file file <filename>lw-messages.conf</filename> is
in the file itself.
</Para>

<Para>
The file <filename>mfmodes.conf</filename> is used by <command>ppad</command>
when determining the default filter options for a printer or group.  The
format of this file is described in Section <XRef LinkEnd="dvi">.
</Para>

<Para>
The file <filename>fontsub.conf</filename> is used to find substitutes for
missing fonts.  It is described in <XRef LinkEnd="fontsub">.
</Para>

</Sect2>

<Sect2>
<Title>The <filename>/usr/share/ppr/PPDFiles</filename> Directory</Title>

<Para>
This is the default location for PPD files.  It contains a collection of PPD
files for common printers.  Most of these were provided by the manufacturers or
Adobe

<FOOTNOTE>
<Para>
Adobe makes a large collection of PPD files available by anonymouse
FTP.  See ftp://ftp.adobe.com/pub/adobe/ to find their latest PPD file
library.
</Para>
</FOOTNOTE>

but a few are part of PPR.
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>Configuration File Formats</Title>

<Para>
Configuration files which the system administrator is expected to modify
directly are described within the reference manual.  The files described
in this section are modified automatically by programs such as ppad.  That
is why they are described here in the Hacker's Guide.
</Para>

<Sect2 id="printer-config">
<Title>Format of a Printer Configuration File</Title>

<Para>
Each file in the directory <filename>/etc/ppr/printers</filename> represents
one printer.  It is permissible to create and edit these files manually,
however the command <command>ppad</command> has been provided to do this
automatically.
</Para>

<Para>
A new printer configuration file is created by the
<command>ppad interface</command> command.
The new configuration file is created by turning the arguments of the
<command>ppad interface</command> command into a
<Emphasis remap="sf">Interface:</Emphasis>
and an <Emphasis remap="sf">Address:</Emphasis> line
and appending the file <filename>/etc/ppr/newprn.conf</filename>.
The <filename>newprn.conf</filename> file is normally created by the
<command>ppad new alerts</command> command.
</Para>

<Para>
Any lines begining with ``;'' or ``&num;'' are comments.  Blank lines are
ignored.  All other lines should begin with a keyword which is followed by one
or more values.  Only the <Emphasis remap="sf">Bin:</Emphasis> and
<Emphasis remap="sf">PPDOpt:</Emphasis> lines should occur more
than once.  If any other line occurs multiple times, all but the last instance
are ignored.
</Para>

<Para>
Any line that begins with an unrecognized keyword is ignored.  This is so that
you can add lines of your own which will be understood and acted on by other
programs.  The program <Emphasis remap="bf">ppr2samba</Emphasis> works on this principle.
</Para>

<VariableList>

<VarListEntry>
<Term><Emphasis remap="sf">Comment:</Emphasis> <Emphasis remap="it">string</Emphasis></Term>
<ListItem>
<Para>
This line contains a comment which describes the printer. The comment is
displayed when the <Emphasis remap="bf">ppad show</Emphasis> command is used to display the printer
configuration.  This line is optional.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Interface:</Emphasis> <Emphasis remap="it">interface&lowbar;path</Emphasis></Term>
<ListItem>
<Para>
This line is required.  It gives the name of the program which the spooler
should invoke in order to make contact with the printer.  If the path does not
begin with a slash, then it refers to a subdirectory of the
<Literal remap="tt">/usr/ppr/interfaces</Literal> directory.  Common values for this line are
``atalk'', ``tcpip'', and ``serial''.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Address:</Emphasis> <Emphasis remap="it">address&lowbar;string</Emphasis></Term>
<ListItem>
<Para>
The address string is passed to the interface program as its second parameter.
The proper format for this string depends on the interface.  Reasonable values
for use with the interfaces named in the above paragraph are ``Mac Laser
Printer: LaserWriter@MYZONE'', ``smith.prn.myorg.org:9100'', and
``/dev/ttys05''.  If the address contains leading or trailing spaces it should
be enclosed in double quotes.  Technically, this line is not required, but the
default address is the name of the printer which is unlikely to be useful.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Options:</Emphasis> <Emphasis remap="it">string</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  The value <Emphasis remap="it">string</Emphasis> is passed to the
interface as its third parameter.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PPDFile:</Emphasis> <Emphasis remap="it">filename</Emphasis></Term>
<ListItem>
<Para>
This line specifies the path and name of an Adobe Post Script Printer
Description file which describes the printer.  If the name does not begin with
a slash, it referes to a file in the directory <Literal remap="tt">/usr/ppr/PPDFiles</Literal>.
This line may not be required but it really ought to be present.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Alert:</Emphasis> <Emphasis remap="it">interval method address</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If it is present, then messages will be sent to the
designated person when faults occur on the printer.
</Para>
<Para>
The integer <Emphasis remap="it">interval</Emphasis> indicates how often these messages will be sent.
For instance, if the value is 5, then a message will be sent for every 5th
fault.
</Para>
<Para>
The <Emphasis remap="it">method</Emphasis> parameter indicates the method by which the message should be
sent.  Currently, this parameter is ignored.  Set it to ``mail''.
</Para>
<Para>
The <Emphasis remap="it">address</Emphasis> indicates the person to whom the message should be sent.
Since <Emphasis remap="sf">mail</Emphasis> is currently the only supported method, this should be a email
address.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">FlagPages:</Emphasis> <Emphasis remap="it">integer integer</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  The first integer refers to banner pages, the second
to trailer pages.  Four different values are allowed.  They are <Emphasis remap="sf">0</Emphasis> for
``never'', <Emphasis remap="sf">1</Emphasis> for ``preferably not'', <Emphasis remap="sf">2</Emphasis> for ``preferably yes'', and
<Emphasis remap="sf">3</Emphasis> for ``always''.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Feedback:</Emphasis> <Emphasis remap="it">boolean</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  It indicates whether or not the connexion to the
printer allows it to send messages back to the spooler.  There is a list of
default values for all the interfaces supplied with PPR compiled into
<Emphasis remap="bf">pprdrv</Emphasis>.  (This list is defined in <Literal remap="tt">include/interfaces.h</Literal>.)  If this
line is not present and the interface is not in the list, it is assumed to be
<Emphasis remap="bf">false</Emphasis>.  Any instances of this line which occur before the <Emphasis remap="sf">Interface:</Emphasis>
line are ignored.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">JobBreak:</Emphasis> <Emphasis remap="it">integer</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  The integer is the code number of a job break method.
This line is only necessary if a job break method other than the default for
the interface is desired.  Default job break numbers for the interfaces which
come with PPR are defined in the source file <Literal remap="tt">include/interfaces.h</Literal>.
The meaning of the values in <Literal remap="tt">interfaces.h</Literal> can be understood by reading
the <Emphasis remap="bf">ppad jobbreak</Emphasis> section of the ppad(8) man page.  Any instances of this
line which occur before the <Emphasis remap="sf">Interface:</Emphasis> line are ignored.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Codes:</Emphasis> <Emphasis remap="it">integer</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  It indicates the range of character codes which the
interface can transmit to the printer.  The acceptable values are 1 for Clean7Bit,
2 for Clean8Bit, 3 for Binary and 4 for Binary if TBCP is used.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">GrayOK:</Emphasis> <Emphasis remap="it">boolean</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  The default value is <Emphasis remap="sf">true</Emphasis>.  If this parameter is
set to <Emphasis remap="sf">false</Emphasis>, the printer will refuse to print any job which does not have
``<Emphasis remap="sf">color</Emphasis>'' in a <Emphasis remap="sf">&percnt;&percnt;Requirements:</Emphasis> line in its header.  A <Emphasis remap="sf">GrayOK:</Emphasis>
line can be used to prevent black-and-white or grayscale jobs from begin
printed on an expensive colour printer.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Charge:</Emphasis> <Emphasis remap="it">money</Emphasis> &lsqb;it/money/&rsqb;</Term>
<ListItem>
<Para>
This line is optional.  If this line is present, then the printer becomes a
protected printer.  Each parameter <Emphasis remap="it">money</Emphasis> should be a positive number with
two decimal places.  If both are ``0.00'', then the printer is protected, but
no actual charges are mode to the user's account.  The first number is the
amount that should be charged for each sheet of paper printed on both sides.
The second is the amount that should be charged for each sheet printed on only
one side.  If the second number is missing it is assumed to be the same as the
first.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">OutputOrder:</Emphasis> <Emphasis remap="it">direction</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If it is absent, it is assumed that direction is
<Emphasis remap="sf">Normal</Emphasis>.  If direction is set to <Emphasis remap="sf">Reverse</Emphasis>, the spooler will cause the
pages to be printed in reverse order, if possible.  The value of this line
can be set with the command <Emphasis remap="bf">ppad outputorder printer Normal</Emphasis>, <Emphasis remap="bf">ppad
outputorder printer Reverse</Emphasis>, or <Emphasis remap="bf">ppad outputorder printer ppd</Emphasis>.  The
command <Emphasis remap="bf">ppad outputorder printer ppd</Emphasis> deletes any <Emphasis remap="sf">OutputOrder:</Emphasis>
line which may exist.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Bin:</Emphasis> <Emphasis remap="it">binname</Emphasis></Term>
<ListItem>
<Para>
The <Emphasis remap="it">binname</Emphasis> parameter is the bin name as it appears in a <Emphasis remap="sf">*InputSlot</Emphasis>
line of the PPD file.  Common values are ``Upper'', ``Lower'', and
``Cassette''.  If automatic bin selection and media handling are desired, there
should be one <Emphasis remap="sf">Bin:</Emphasis> line for each installed bin.  Removing all the <Emphasis remap="sf">Bin:</Emphasis>
lines disables automatic bin selection and media handling.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">DefFiltOpts:</Emphasis> <Emphasis remap="it">options</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present, it contains input filter options in the
form of name-value pairs.  (If the user employs one or more <Emphasis remap="bf">-o</Emphasis> switchs
when submitting a job with <Emphasis remap="bf">ppr</Emphasis>, then the argument of each <Emphasis remap="bf">-o</Emphasis> switch
is appended to this list.  Thus, <Emphasis remap="bf">-o</Emphasis> switches can be used to override
settings in this list.)  This line is automatically updated whenever the
<Emphasis remap="bf">ppad ppd</Emphasis> command is used to select a new PPD file or the <Emphasis remap="bf">ppad ppdopts</Emphasis>
command is used to change the PPD options.  An update may be forced at any time
with the <Emphasis remap="bf">ppad deffiltopts</Emphasis> command.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Switchset:</Emphasis> <Emphasis remap="it">switch&lowbar;description</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present, it contains a compressed description of
the switch settings which were saved with the <Emphasis remap="bf">ppad switchset</Emphasis> command.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PassThru:</Emphasis> <Emphasis remap="it">type&lowbar;list</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present, it contains a space separated list
of file types which should be passed directly through to the printer.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PagesLimit:</Emphasis> <Emphasis remap="it">integer</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present it indicates the maximum number of pages
this printer is allowed to print in a single job.  Jobs with more pages
than the number indicated are rejected.  If the job was submitted to a group,
it may be printed on another member of the group.  If no printer will print it,
then it is arrested.
</Para>
<Para>
This line may be edited with the <Emphasis remap="bf">ppad pageslimit</Emphasis> command.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PageCountQuery:</Emphasis> <Emphasis remap="it">integer</Emphasis></Term>
<ListItem>
<Para>
This line can be used to enable pair of queries which fetch the printers
lifetime page count before and after the printing of the job (exclusive
of banner and trailer pages).
</Para>
<Para>
The information obtained through these queries can be logged.  See Section
<XRef LinkEnd="printlog">.
</Para>
<Para>
If this line is absent or the <Emphasis remap="it">integer</Emphasis> is 0, then this feature is disabled.
</Para>
<Para>
If the value is 1, then then the PostScript code
``statusdict /pagecount get exec =='' is used to get the page count.  No
attempt is made to make sure that the print engine has come to a stop and the
printer has updated the count before making the query.  On some printers this
does not cause a problem because the page count is updated imediately.  On
others it may be solved by using the <Emphasis remap="bf">pjl</Emphasis> or <Emphasis remap="bf">signal/pjl</Emphasis> jobbreak
method which causes PPR to wait until all of the pages have hit the
output bin before considering the job complete.
</Para>
<Para>
In the future, additional values for this parameter may be defined.  These
additional values will use different techniques to obtain the page count.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Commentator:</Emphasis> <Emphasis remap="it">number name address options</Emphasis></Term>
<ListItem>
<Para>
A printer configuration file may have zero or more of these lines.  Their
purpose is explained in Appendix <XRef LinkEnd="commentators">.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PPDOpt:</Emphasis> <Emphasis remap="it">option value</Emphasis> (<Emphasis remap="it">description</Emphasis>)</Term>
<ListItem>
<Para>
A printer configuration file may have zero or more of these lines.  Each line
describes the setting of the options listed in the PPD file.  These settings
generally describe optional equipment which may be installed in or attatched to
the printer such as additional paper trays or duplex attachements.  The
<Emphasis remap="it">option</Emphasis> is the option name from the PPD file, without the translation
string (the part which may follow a slash).  The <Emphasis remap="it">value</Emphasis> is one of the
possible option values listed  in the PPD file, again without the translation
string.  The description is formed by combining the translation strings for the
option and the value.  (Option settings and the related terminology are
explained in Adobe's PostScript Printer Description File Format
Specification.)  These lines can be generated automatically with the <Emphasis remap="bf">ppad
ppdopts</Emphasis> command.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="bf">ppr2samba:</Emphasis> <Emphasis remap="it">include</Emphasis> <Emphasis remap="it">prototype</Emphasis></Term>
<ListItem>
<Para>
Used by <Emphasis remap="bf">ppr2samba</Emphasis>.  See the man page ppr2samba(8).
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="bf">ppr2samba-drivername:</Emphasis> <Emphasis remap="it">name</Emphasis></Term>
<ListItem>
<Para>
Used by <Emphasis remap="bf">ppr2samba</Emphasis>.  See the man page ppr2samba(8).
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="bf">ms-driver-name:</Emphasis> <Emphasis remap="it">name</Emphasis></Term>
<ListItem>
<Para>
Formerly used by <Emphasis remap="bf">ppr2samba</Emphasis>.  See the man page ppr2samba(8).
</Para>
</listitem>
</VarListEntry>

</VariableList>

</Sect2>

<Sect2 id="group-config">
<Title>Format of a Group Configuration File</Title>

<Para>
Each file in the <Literal remap="tt">/etc/ppr/groups</Literal> directory represents a group.  It
is permissible to create and edit these files manually, however it is generally
more convient to use the command <Emphasis remap="bf">ppad</Emphasis> to do it automatically.  The
<Emphasis remap="sf">Printer:</Emphasis> line is the only one which should appear more than once.  If any
other line occurs more than once, all but the last instance are ignored.  Lines
with ``;'' or ``&num;'' in the first column are comments.  The remaining lines are
of two types:
</Para>

<VariableList>

<VarListEntry>
<Term><Emphasis remap="sf">Comment:</Emphasis> <Emphasis remap="it">string</Emphasis></Term>
<ListItem>
<Para>
This line contains a comment describing the group. This comment is displayed by
the <Emphasis remap="bf">ppad group show</Emphasis> command.  This line is optional.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Printer:</Emphasis> <Emphasis remap="it">name</Emphasis></Term>
<ListItem>
<Para>
The <Emphasis remap="it">name</Emphasis> is the name a printer that should be a member of the group.
There should be one line for each group member.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Rotate:</Emphasis> <Emphasis remap="it">boolean</Emphasis></Term>
<ListItem>
<Para>
This value indicates if the spooler should attempt to distribute the load
evenly among the printers.  If it is <Emphasis remap="sf">False</Emphasis>, the spooler will always take
the first idle printer in the group.  If it is <Emphasis remap="sf">True</Emphasis>, the spooler will
attempt to use each printer in turn.  The default is <Emphasis remap="sf">True</Emphasis>.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">DefFiltOpts:</Emphasis> <Emphasis remap="it">options</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present, it contains some name-value pairs to be
prepended to any the user supplies with <Emphasis remap="bf">ppr</Emphasis>'s <Emphasis remap="bf">-o</Emphasis> switch. This line
will be automatically updated by <Emphasis remap="bf">ppad</Emphasis> whenever a group member is added or
deleted.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">Switchset:</Emphasis> <Emphasis remap="it">switch&lowbar;description</Emphasis></Term>
<ListItem>
<Para>
If this line is present, it contains a compress representation if the switches
saved with the <Emphasis remap="bf">ppad group switchset</Emphasis> command.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">PassThru:</Emphasis> <Emphasis remap="it">type&lowbar;list</Emphasis></Term>
<ListItem>
<Para>
This line is optional.  If present, it contains a space separated list
of file types which should be passed directly through to the printer.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">ms-driver-name:</Emphasis> <Emphasis remap="it">name</Emphasis></Term>
<ListItem>
<Para>
Used by ppr2samba.  See the man page ppr2samba(8).
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term><Emphasis remap="sf">ppr2samba:</Emphasis> <Emphasis remap="it">include</Emphasis> <Emphasis remap="it">prototype</Emphasis></Term>
<ListItem>
<Para>
Used by ppr2samba.  See the man page ppr2samba(8).
</Para>
</listitem>
</VarListEntry>

</VariableList>

</Sect2>

</Sect1>

<Sect1 id="interfaces2">
<Title>Requirements for an Interface</Title>

<Para>
This appendix provides the information you will need to write a PPR printer
interface program.  An interface is a program, possibly a shell script, which
takes the text of the print job from standard input and sends it to the
printer.  Errors, such as PostScript error messages, should be sent to stdout
or stderr.
</Para>

<Sect2>
<Title>The Parameters</Title>

<Para>
There are 10 parameters in all, but most interfaces ignore all but the first
two or three.  There were 8 parameters in version 1.31.  In version 1.32
there are 10.  The order of parameters 1-3 did not change but the
order of parameters 4-9 did changed.
</Para>

<Para>
The interface is invoked with the first parameter set to the name of the
printer.  The interface should use this name when posting alerts using either
the alert() function in libppr.a or lib/alert.
</Para>

<Para>
The second parameter is set to the string following the <Emphasis remap="sf">Address:</Emphasis> keyword
in the printer configuration file or to the printer name if there is no address
line.  (That last feature is a holdover from very old versions of PPR. Printer
configuration files created by <Emphasis remap="bf">ppad</Emphasis> always have <Emphasis remap="sf">Address:</Emphasis> lines.)
</Para>

<Para>
The third parameter is set to the string following the <Emphasis remap="sf">Options:</Emphasis> keyword in
the printer config uration file.  This will be zero or more space separated
name=value pairs.
</Para>

<Para>
The fourth parameter is the value from the printer configuration file's
<Emphasis remap="sf">JobBreak:</Emphasis> line.  This value is a small integer.  The possible values are
defined in <Literal remap="tt">include/interface.h</Literal>.
</Para>

<Para>
The fifth is the value from the printer configuration file's <Emphasis remap="sf">Feedback:</Emphasis>
line.  It is zero if the printer is incapable of sending data back to the
computer running PPR over the communications line, non-zero if it is capable.
The <Emphasis remap="sf">Feedback:</Emphasis> line is set with the <Emphasis remap="bf">ppad feedback</Emphasis> command.
</Para>

<Para>
The sixth parameter is the value from the printer configuration file's
<Emphasis remap="sf">Codes:</Emphasis> line.  The value is a small integer.  The possible values are defined
in <Literal remap="tt">include/interface.h</Literal>.
</Para>

<Para>
The seventh parameter is set to the name of the job.  (For example,
``mouse:chipmunk-148.0(mouse)''.  This will not generally be used.  The
<Emphasis remap="bf">lpr</Emphasis> interface passes this information on to the remote system.
</Para>

<Para>
The eight parameter is set the the text of the &percnt;&percnt;Routing:
comment in the print job.  If the &percnt;&percnt;Routing: comment is absent, then the
fourth parameter is blank.  This parameter will generally be ignored.  If a fax
interface is every written it will read the telephone number from this
parameter.
</Para>

<Para>
The ninth parameter is the text of the <Emphasis remap="sf">&percnt;&percnt;For:</Emphasis> comment in the
print job.  (The <Emphasis remap="sf">&percnt;&percnt;For:</Emphasis> line in the job as sent to the
printer which is not necessarily the same as the <Emphasis remap="sf">&percnt;&percnt;For:</Emphasis> line
in the input file.)  If this information is unavailable, the field is blank.
The <Emphasis remap="bf">lpr</Emphasis> interface passes this on to the remote system.
</Para>

<Para>
The tenth parameter indicates the type of the file on stdin, that is, the
file which the interface program is going to transmit to the printer.  Normally
this parameter is an empty string, which indicates that the file is in
PostScript format.
</Para>

<Para>
If passthru mode is in effect (see <Emphasis remap="bf">ppad passthru</Emphasis> and <Emphasis remap="bf">ppad group
passthru</Emphasis>), that is if the file to be transmitted to the printer is not
a PostScript file, then this parameter will be the name of the file type,
such as ``pcl'' or ``pdf''.  (The file type names which appear in this
parameter are the same names as are used with the <Emphasis remap="bf">ppr -T</Emphasis> switch.
A non-empty tenth parameter <Emphasis>does not</Emphasis> necessarily indicate that
a <Emphasis remap="bf">-T</Emphasis> switch was used.)
</Para>

<Para>
Also, if transparent mode is in effect (see <Emphasis remap="bf">ppr -H transparent</Emphasis>), then
this parameter will contain a space separated list of the filters which
would be required (and may actually have been invoked) to convert the
input file to PostScript.  Uncompression with <Emphasis remap="bf">uncompress</Emphasis>
and <Emphasis remap="bf">gunzip</Emphasis> are indicated by the strings ``uncompress'' and ``gunzip''
respectively.  Here are some examples:  if the input file is already PostScript,
then this parameter will be empty.  If the file is PCL data, then this
paramater will be ``pcl''.  If the file is <Emphasis remap="bf">gzip</Emphasis> compressed
PostScript, then this parameter will be ``gunzip''.  If the file is
<Emphasis remap="bf">gzip</Emphasis> compressed PCL, then this parameter will be ``gunzip pcl''.
</Para>

<Para>
The various Ghostscript interfaces examine the value of this 10th parameter,
and if it is not empty, remove Ghostscript from the pipeline.
</Para>

</Sect2>

<Sect2>
<Title>The Return Codes</Title>

<Para>
The exit codes which interface programs should use are defined in
<Literal remap="tt">include/interface.h</Literal> and <Literal remap="tt">/lib/interface.sh</Literal>.
</Para>

<Para>
If the interface prints the job successfully, it should return an exit code of
<Emphasis remap="bf">EXIT&lowbar;PRINTED</Emphasis>.
</Para>

<Para>
If there was a printer error, the interface should exit with code
<Emphasis remap="bf">EXIT&lowbar;PRNERR</Emphasis> and the printer will be placed in fault-auto-retry mode.
</Para>

<Para>
If the printer error was caused by a circumstance which will not disappear
spontainiously, such as a syntactically invalid printer address, then the
interface should return <Emphasis remap="bf">EXIT&lowbar;PRNERR&lowbar;NORETRY</Emphasis> and the printer will be placed
in fault-no-auto-retry mode.
</Para>

<Para>
If a PostScript error occured in the job and the interface detects it it should
use the code <Emphasis remap="bf">EXIT&lowbar;JOBERR</Emphasis>.  Generally the interface will leave the job of detecting
PostScript errors to <Emphasis remap="bf">pprdrv</Emphasis> which examines the messages received from the
printer.
</Para>

<Para>
If the interface program catches a signal such as SIGTERM, it should exit
with code <Emphasis remap="bf">EXIT&lowbar;SIGNAL</Emphasis> at the end of the signal handler function.
</Para>

<Para>
If no printer error occured but the printer was busy or off line, the
interface should return <Emphasis remap="bf">EXIT&lowbar;ENGAGED</Emphasis>.
</Para>

<Para>
The interface program should not return any value other than those defined
above.  Any undefined value will be interpreted as a <Emphasis remap="bf">EXIT&lowbar;PRNERR</Emphasis>.
</Para>

</Sect2>

<Sect2>
<Title>Interpretation of the Fifth Parameter</Title>

<Para>
If the <Emphasis remap="it">jobbreak</Emphasis> value for the printer (the firth parameter) is
<Emphasis remap="bf">JOBBREAK&lowbar;SIGNAL</Emphasis>, or  <Emphasis remap="bf">JOBBREAK&lowbar;SIGNAL&lowbar;PJL</Emphasis> then the interface should
send its parent SIGUSR1 as soon as it has established its own SIGUSR1 handler.
Thereafter, whenever it receives SIGUSR1, it should read all bytes currently
available from the pipe, send them to the printer and then send the printer an
end of job indication. When it receives an acknowleding end of job indication
from the printer, it should send its parent SIGUSR1.  The interface <Emphasis remap="bf">atalk</Emphasis>
does this.  This handshaking method is necessary because the PAP (AppleTalk
Printer Access Protocol) end of file marker has no representation in the byte
stream.  Instead it is sent by setting a special flag in the header of the
packet.
</Para>

<Para>
Other job break values do not require any special action on the part of
the interface.  (Before version 1.40, interfaces took special action for
the control-d and pjl methods.  This is no longer necessary.)
</Para>

<Para>
It might be useful to have the interface test for jobbreak settings with which it
is known to be incompatible.  It should only check for settings <Emphasis>known</Emphasis> to be
incompatible.  It should not limit jobbreak settings to a list of those known to
be compatible since other, compatible settings may be added in future versions of
PPR.  The various possible jobbreak settings are briefly described in the ppad(8)
man page under the section for the <Emphasis remap="bf">ppad jobbreak</Emphasis> command.  A more thorough
discussion may be found in section <XRef LinkEnd="interfaces1">.  The code numbers for the various jobbreak values are defined in the
include file <Literal remap="tt">include/interface.h</Literal> and in the shell script fragment
<Literal remap="tt">/lib/interface.sh</Literal>.
</Para>

</Sect2>

</Sect1>

<Sect1 id="responders">
<Title>Requirements for a Responder</Title>

<Para>
A responder is a small program.  All responders are stored in the responders
directory <Literal remap="tt">/usr/ppr/responders</Literal>.  The responder which will eventually be
used to tell the user what happened to the job is selected when the job is
submitted.  It is selected using <Emphasis remap="bf">ppr</Emphasis>'s <Emphasis remap="bf">-m</Emphasis>. switch.  The argument to
the <Emphasis remap="bf">-m</Emphasis> switch is the name of the program in the responders directory which
should be used.  A responder can be very simple.  Here is an example:
</Para>

<Para>

<Screen>
#!/bin/sh
echo "Message for $1:\n$3" | write $2
exit 0
</Screen>

</Para>

<Para>
The responder shown above is a stript down version of the responder <Emphasis remap="bf">write</Emphasis>.
If the <Emphasis remap="bf">-m</Emphasis> switch is not used then the name of the responder will be read
from the environment variable PPR&lowbar;RESPONDER.  If PPR&lowbar;RESPONDER is not defined
then the responder <Emphasis remap="bf">write</Emphasis> will be used.
</Para>

<Para>
A responder program is invoked with the name of the user as the first
parameter.  It is the name just as it appears in queue listings and on banner
pages.
</Para>

<Para>
The address to which the message should be sent is the second parameter.  The
address is specified at the time <Emphasis remap="bf">ppr</Emphasis> is invoked by using the <Emphasis remap="bf">-r</Emphasis>
switch.  The proper format for the address depends on the responder.  If the
<Emphasis remap="bf">-r</Emphasis> switch is absent then the value of the environment variable
PPR&lowbar;RESPONDER&lowbar;ADDRESS is used.  If that too is absent then the name of the Unix
user who invoked <Emphasis remap="bf">ppr</Emphasis> is used.  The value used in the absence of both
<Emphasis remap="bf">-r</Emphasis> and PPR&lowbar;RESPONDER&lowbar;ADDRESS is appropriate since the default responder is
a script which invokes the Unix program <Emphasis remap="bf">write</Emphasis>.
</Para>

<Para>
The third parameter is the suggested message text.  The message text will
contain embedded line feeds.  The length of the lines will depend on the
responder.  The routine get&lowbar;responder&lowbar;width() in <Literal remap="tt">libppr/reswidth.c</Literal>
determines what length to limit the lines to.  For most responders, this
routine returns 0 which means to use a predetermined set of line breaks which
generally results in lines less than 80 characters long.
</Para>

<Para>
The fourth parameter is reserved for future use, at present it is an empty
string.
</Para>

<Para>
The fifth parameter is a space separated list of responder options.  Each of
this options is a name=value pair.  Common options include <Emphasis remap="bf">printed=no</Emphasis> and
<Emphasis remap="bf">timeout=60</Emphasis>.  The value of this option comes from the <Emphasis remap="bf">ppr</Emphasis>
<Emphasis remap="bf">--responder-options</Emphasis> switch or from the environment variable
PPR&lowbar;RESPONDER&lowbar;OPTIONS.  A responder should ignore any options it does not
recognize.
</Para>

<Para>
The sixth parameter is a code number which represents the approximate content
of the message.  It is provided in case a responder wants to send different
types of message by different methods or wishes to provide its own wording for
one or more of the messages.  For example, it might want to send a popup
message but then follow it up with email if the message indicated that the job
was arrested.  The code numbers are defined in C include file
<Literal remap="tt">include/respond.h</Literal>, the Bourne shell script include file
<Literal remap="tt">lib/respond.sh</Literal>, and the Perl include file <Literal remap="tt">lib/respond.ph</Literal>.
</Para>

<Para>
The seventh parameter contains the complete job id.  This is probably only
useful if the responder is constructing its own messages since the default
messages provided in the third parameter already mention the job id.  The job
id is not provided in the normal form since that is rather difficult to parse.
In stead, the elements are separated by spaces.  The elements are, in order,
destination node, <Emphasis remap="it">destination name</Emphasis>, <Emphasis remap="it">queue id number</Emphasis>, <Emphasis remap="it">sub id
number</Emphasis>, and <Emphasis remap="it">home node</Emphasis>.  For example, ``mouse chipmunk 1000 0 mouse''.
This id would normally appear as ``mouse:chipmunk-1000.0(mouse)'' or more
likely in abreviated form as ``chipmunk-1000''.
</Para>

<Para>
The eight parameter is also necessary for constructing replacement messages.
Some of the messages normally contain a blank space which is filled with a
piece of text.  Normally this is the name of the printer which the job was
printed on, but if the user database is being used and PPR refuses access the
the printer, the piece of text is the name of the user who was refused access.
At other times the piece of text will be an error message.
</Para>

<Para>
The ninth parameter is the title of the job.  This title will be derived from a
"&percnt;&percnt;Title:" line if present.  Failing that, the title will be the
name of the file being printed.  If the file was received on stdin, this field
will generally be blank.
</Para>

<Para>
The tenth parameter is the time at which the job was submitted.  It is
represented in Unix format (as a count of the seconds since 12:00am, January
1, 1970).  The program <Emphasis remap="bf">lib/time&lowbar;elapsed</Emphasis> may be used to express this
time in terms of how far in the past it is.
</Para>

<Para>
The eleventh parameter will contain a short message which indicates the
reason the job was arrested.  If the response code does not indicated that
the job has been arrested, this string will be blank.
</Para>

<Para>
The twelth parameter contains the number of pages printed.  If this is unknown,
it is "?".  If the response code (the fourth parameter) has a value other than
<Emphasis remap="bf">RESP&lowbar;FINISHED</Emphasis> then the contents of this field is undefined.
</Para>

<Para>
When the responder is run, stdin with either be connected to <Literal remap="tt">/dev/null</Literal>
or it will be connected to the job's log file.  This is so that the responder
may send the job log back to the user.  Some of the supplied responders exploit
this feature.
</Para>

<Para>
When exiting, the responder should return a value of zero if the message was
delivered.  It should also return a value of zero if the addresse was not
found.  Non-zero exit values should be reserved for truly abnormal conditions
such as insufficient system resources or syntactically invalid addresses.  If a
responder does return a non-zero exit value, <Emphasis remap="bf">ppr</Emphasis> will print a notice to
that effect on stderr or <Emphasis remap="bf">pprd</Emphasis> will put a notice in its log file, depending
on which one invoked the responder.
</Para>

<Para>
When the responder is invoked by <Emphasis remap="bf">pprd</Emphasis>, it will always have a real uid,
effective uid and saved uid of ``ppr''.  When it is invoked by <Emphasis remap="bf">ppr</Emphasis> (due to
the use of the <Emphasis remap="bf">-e</Emphasis> responder option) things will be different.  The program
<Emphasis remap="bf">ppr</Emphasis> is setuid ``ppr'', so the effective and saved uids are ``ppr'' and the
real uid is the id of the user who invoked it.  Just before executing the
responder <Emphasis remap="bf">ppr</Emphasis> sets the effective user id equal to the real user id.  This
last feature is not intended as a security measure, rather, the <Emphasis remap="bf">xwin</Emphasis>
responder will not work if this is not done since the X library uses access()
on the .Xauthority file before trying to open it which means that the
.Xauthority file in the user's home directory must be readable under both the
real and the effective uids.  This feature may be overridden by setting the
setuid bit on the responder.  If this is done then the effective uid will remain
``ppr''.
</Para>

</Sect1>

<Sect1 id="filters">
<Title>Requirements for an Input Filter</Title>

<Para>
If <Emphasis remap="bf">ppr</Emphasis> determines that the input file is not PostScript, it will seek
to use a filter to convert it to PostScript.  This appendix provides the
information you will need to write your own PPR input filters.
</Para>

<Para>
The filters are found in the directory <Literal remap="tt">/usr/ppr/lib</Literal>.  Each of these
files has a name that consists of ``filter&lowbar;'' followed by the PPR input type
name.  For example, the filter for JPEG files is called
``<Literal remap="tt">/usr/ppr/filters/filter&lowbar;jpeg</Literal>".
</Para>

<Para>
A filter should read the file from STDIN and write PostScript code on STDOUT.
If it must, it can write messages on STDERR.  STDIN is guaranteed to be
seekable.  Messages sent to STDERR will go wherever STDERR was going when
<Emphasis remap="bf">ppr</Emphasis> was invoked.
</Para>

<Para>
The parameters are as follows:
</Para>

<Para>

<OrderedList>
<ListItem>

<Para>
The first parameter is the list of filter options.  These are expressed as a
space seperated list of name-value pairs.  The name and value are joined by an
equal sign.  The options list is formed by concatrnating the contents of the
<Emphasis remap="sf">DefFiltOpts:</Emphasis> line in the printer or group configuration file with the
contents of any <Emphasis remap="bf">-o</Emphasis> lines the user put on the <Emphasis remap="bf">ppr</Emphasis> command line.

Before passing the option list to the filter, <Emphasis remap="bf">ppr</Emphasis> pre-processes it.  Any
options whose names begin with a file type name and a hyphen will have the file
type name and the hyphen removed if the file type name matches the filter being
invoked, otherwise, such options are discarded.  The names of the parameters (the
part to the left of the equals sign) are converted to lower case.  The values (the
part to the right of the equals sign) are not.

A responder should ignore any option it does not recognize.  If the same option
appears more than once, the value from the last instance is the one that should be
used.

</Para>
</ListItem>
<ListItem>

<Para>
The name of the printer or group to which the job was submitted.  This will
generally be ignored.

</Para>
</ListItem>
<ListItem>

<Para>
The third is the job title.  This may be used by filters which format
their input as pages with headers and footers.

</Para>
</ListItem>
<ListItem>

<Para>
The directory which was current when <Emphasis remap="bf">ppr</Emphasis> was invoked.  This is used
by the TeX, TeXinfo, and DVI filters when searching for include files.

</Para>
</ListItem>

</OrderedList>

</Para>

<Para>
When a filter is invoked, the environment variable IFS is set to a space and a
tab, and the variable PATH is set to a value which is just adequate to find
standard shell script helper programs such as test, sed, and grep.  On most
systems, that value of PATH is ``/bin:/usr/bin''.
</Para>

<Para>
Here is an example.  Suppose this line is in the printer's configuration file:
</Para>

<Para>

<Screen>
DefFiltOpts: level=2 colour=False resolution=300 freevm=1048576 mfmode=CanonCX
</Screen>

</Para>

<Para>
and the user submits a JPEG (JFIF) file with this command:
</Para>

<Para>

<Screen>
$ ppr -d myprn -o noisy=no -o 'fortran-width=130 jpeg-noisy=yes' picture.jpg
</Screen>

</Para>

<Para>
The filter will be invoked like this:
</Para>

<Para>

<Screen>
filter_jpeg 'level=2 colour=False resolution=300 freevm=1048576 mfmode=CanonCX noisy=no noisy=yes' myprn 'picture.jpg' /home/me
</Screen>

</Para>

<Para>
A filter should interpret any options it recognizes and ignore any it does
not.  If it finds two contradictory options, it should obey the last one.  In
the example above, the option ``noisy=yes'' is the one that prevails.  The
options ``freevm=1048576'' and ``mfmodes=CanonCX'' would be ignored simply
because the JPEG filter has no code to use them.
</Para>

<Para>
If the filter exits with a value other than 0, the job will not be discarded.
A message may be informed by printing on stderr or invoking a responder, the
exect behaviour being controled by the <Emphasis remap="bf">-e</Emphasis> switch.
</Para>

<Para>
When a filter is executed, the real user id is that of the user who executed
<Emphasis remap="bf">ppr</Emphasis>.  The effective user id and the saved user id's are ``ppr''.  The real
group id is the same as it was when <Emphasis remap="bf">ppr</Emphasis> was executed.  The effective and
saved group id's are ``ppop''.
</Para>

<Para>
It is possible to determine precisely what filter is being executed with what
arguments by running <Emphasis remap="bf">ppr</Emphasis> with the <Emphasis remap="bf">-G infile:filter</Emphasis> option.
</Para>

<Para>
The filters supplied with PPR, together with their options are described in the
ppr(1) man page, under the section for the <Emphasis remap="bf">-T</Emphasis> switch.
</Para>

</Sect1>

<Sect1>
<Title>How Continuous Queue and Printer Status Display Works</Title>

<Para>
&lsqb;This section has not been written yet.]
</Para>

</Sect1>

<Sect1>
<Title>Notes on the Source Code</Title>

<Para>
Generally, there is one subdirectory for each major program.  Smaller
components, such as responders are gathered together into directories.
</Para>

<Para>
Since PPR, in addition to being a useful tool, is intended as an instructive
example for writers of programs which must parse DSC comments, and because it
makes it easier to maintain, the source code is copiously commented.  In the
source code comments, the abbreviation "RBIIp" refers to a page in the Red Book
(PostScript Langauge Reference Manual, Second Edition).  As far as possible
functions from the ANSI C, Posix, and Berkley Sockets libraries have been used
in preference to function from less widely supported libraries such as the
System V or BSD libraries.
</Para>

<Para>
The signal() function from the ANSI C library
installs a signal handler.  In some implementations, such as System V, this is
a one-shot signal handler which is removed just before it is called for the
first time.  In other implementations, notably BSD, this signal handler remains
installed and the signal is automatically blocked until the signal handler
exits.
</Para>

<Para>
For the purpose of setting up signal handlers, POSIX provides a function
called sigaction().  Unfortunately, since one of its arguments is a structure,
about 10 lines of code are needed to use it.  To simplify the source code,
PPR has two functions, one called signal&lowbar;interupting() which works like BSD
signal() and signal&lowbar;restarting() which works differs only in that it passes
the option SA&lowbar;RESTART to sigaction().  SA&lowbar;RESTART requests that system calls
interupted by the signal be restarted automatically.
</Para>

<Para>
The PPR source code assumes that whenever it calls signal() it will be
calling a version conforms to BSD semantics.  To make sure this holds true
on all systems, global&lowbar;defines.h defines a macro
which equates signal() with signal&lowbar;interupting().
</Para>

<Sect2>
<Title>Important Header Files</Title>

<Para>
There are several header files containing parameters the user may wish to
adjust before compiling the programs.  These are described below:
</Para>

<Sect3>
<Title><Literal remap="tt">include/version.h</Literal></Title>

<Para>
This file defines the pre-processor macros VERSION, SHORT&lowbar;VERSION, and
COPYRIGHT.  If you modify PPR you may want to note that fact in the VERSION
macro.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">include/global.mk</Literal></Title>

<Para>
This file is included by all the make files.  The shell script <Emphasis remap="bf">Configure</Emphasis>
generates this file.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">include/sysdep.h</Literal></Title>

<Para>
This file is included by <Literal remap="tt">include/global&lowbar;defines.h</Literal> (described
below).  This file contains one section for each system to which PPR has
been ported.  For each of these it defines some macros and possibly some
function prototypes.  You should add a section to this file
if you are trying to port PPR to a new system.  The macros which
can be defined in this file are described in comments at its head.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">include/global&lowbar;defines.h</Literal></Title>

<Para>
An important part of this file is the list of definitions of files and
directories.  Any file or directory names in this section which do not begin
with a slash are relative to the directory defined as <Emphasis remap="sf">HOMEDIR</Emphasis>. There are
other parameters below the file names, but these should be modified with care.
Probably, you should only modify <Emphasis remap="sf">QUEUE&lowbar;SIZE</Emphasis>, <Emphasis remap="sf">MAX&lowbar;DOCMEDIA</Emphasis>,
<Emphasis remap="sf">MAX&lowbar;LINE</Emphasis>, <Emphasis remap="sf">MAX&lowbar;BINS</Emphasis>, <Emphasis remap="sf">MAX&lowbar;GROUPS</Emphasis>, and <Emphasis remap="sf">MAX&lowbar;PRINTERS</Emphasis>.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">ppr/ppr.h</Literal></Title>

<Para>
Defined here is the maximum number of <Emphasis remap="bf">-F</Emphasis> switches for <Emphasis remap="bf">ppr</Emphasis>.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">include/pprd.h</Literal></Title>

<Para>
In this file are a few parameters related to retrying printer faults and to
the priority system.  The present values should prove satisfactory.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">papsrv/papsrv.h</Literal></Title>

<Para>
One might wish to edit this file in order to change the maximum number of
PAP server names which may be advertise.  Keep in mind that the number of PAP
server names might also be limited by your AppleTalk protocol stack.  In CAP,
the limit is defined in the CAP sources in the file
<Literal remap="tt">cap60/lib/cap/abpap.h</Literal>.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">filter&lowbar;lp/filter&lowbar;lp.h</Literal></Title>

<Para>
One may desire to edit this file in order to change the paper size, margins
and typefaces used by the line printer emulator.  Only monospace fonts are
likely to give good results.  It is also possible to change the trigger values
for selecting landscape rather than portrait mode.  Any change to the trigger
values should be tested very thoroughly to ensure that pleasing results are
obtained with input files of various formats.  Starting with version 1.20 of
PPR, the lp filter has options which can be used to change these parameters
without re-compiling.  These values are specified by using the <Emphasis remap="bf">ppr</Emphasis> <Emphasis remap="bf">-o</Emphasis>
switch when submitting a print job.  The <Emphasis remap="bf">ppad switchset</Emphasis> command can be
useful here, especially when the jobs are arriving through <Emphasis remap="bf">lprsrv</Emphasis>.  It is
still necessary to edit <Literal remap="tt">include/filter&lowbar;lp.h</Literal> and re-compile if you wish
to change the system-wide defaults.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">include/interface.h</Literal></Title>

<Para>
This include file defines the exit codes which printer interfaces should
use.  It also describes the possible values of the fifth parameter to a printer
interface which are also are possible values for the printer configuration file
<Emphasis remap="sf">JobBreak:</Emphasis> line.  Most of the definitions in this file are repeated in
bourne shell script form in the file <Literal remap="tt">interfaces/interface.sh</Literal> which is
installed as <Literal remap="tt">/usr/ppr/lib/interface.sh</Literal>.
</Para>

</Sect3>

<Sect3>
<Title><Literal remap="tt">libppr/interfaces.c</Literal></Title>

<Para>
This file contains an array of structures which give the default values
which should be use with each of the printer interface programs supplied with
PPR when <Emphasis remap="sf">JobBreak:</Emphasis>, <Emphasis remap="sf">Feedback:</Emphasis>, or <Emphasis remap="sf">Codes:</Emphasis> lines are missing
from printer configuration files.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>The PPR Library</Title>

<Para>
The PPR components use a library of common code.  Persons attempting to
extend PPR by adding additional programs are encouraged to make use of the
functions in this library.  This library is contained in a file <Literal remap="tt">libppr.a</Literal>
which is created in the top level source directory.  Its source code is found
in the <Literal remap="tt">libppr</Literal> directory.  The prototypes for PPR library functions are
found in the file <Literal remap="tt">include/global defines.h</Literal> with a few in
<Literal remap="tt">include/global&lowbar;structs.h</Literal>.
</Para>

<Sect3>
<Title>daemon()</Title>

<Para>
This function is used by PPR programs which run in the background.  A PPR
daemon process should call this function during initialization.  This function
forks and the parent exits.  It also disassociates the process from the
controling terminal and closes all open file descriptors including stdin,
stdout, and stderr.
</Para>

</Sect3>

<Sect3>
<Title>myalloc(), myfree(), myrealloc(), mystrdup(), and mystrndup()</Title>

<Para>
The normal Unix memory allocation routines return a NULL pointer if they
fail to allocate the requested memory.  Since it is very rare that a Unix
system will refuse to allocate any reasonable amount of memory, programers
often ignore the possiblity of malloc() and friends returning NULL.  Since a
memory allocation failure is highly unlikely, PPR programs treat it as a fatal
error, but, rather than test the return value of malloc() after each call, the
calls are encapsulated in special functions which test the return value and
abort the program if the allocation fails.
</Para>

<Para>
A program calling these functions must provide a function called ``fatal()''.
This function should print an error message and exit.  The first argument is
the value to pass to exit(), the second is a printf() style format string for
the error message.  Any remaining arguments are the values specified by the
format string.  The caller should create a global integer variable called
``lib&lowbar;memory&lowbar;fatal'' which contains the value these routines should pass as the
first argument to fatal().
</Para>

<Para>
The function myalloc() takes two arguments.  The first is the number of items
to allocate, the second is the size of each in bytes.  This function will return
a void pointer to the allocated memory.  The memory is not initialized.
</Para>

<Para>
The function myfree() is used to free any memory allocated by the other
functions.
</Para>

<Para>
The function myrealloc() changes the size of a memory block.  The
first argument is a pointer to the old block, the second is the desired new
number of members, the third argument is the size of each member in bytes.  This
function returns a pointer to a resized block, possibly at a different
location.
</Para>

<Para>
The function mystrdup() takes a string pointer as its sole argument
and returns a pointer to a new copy of the string.
</Para>

<Para>
The function mystrndup() takes a string pointer and a maximum length as its
arguments.  It returns a pointer to a new string containing a copy of the
string truncated to the maximum length.
</Para>

</Sect3>

<Sect3>
<Title>ppr&lowbar;sscanf()</Title>

<Para>
This function is similiar to sscanf().  It implements the following formats:
</Para>

<VariableList>

<VarListEntry>
<Term>&percnt;d</Term>
<ListItem>
<Para>
read an int.  The argument should be a pointer to an int.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;ld</Term>
<ListItem>
<Para>
read a long int.  The argument should be a pointer to a long
int.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;hd</Term>
<ListItem>
<Para>
read a short int.  The argument should be a pointer to a short
int.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;s</Term>
<ListItem>
<Para>
read characters up to the next whitespace.  The argument should
be a pointer to a char array with enough space to hold the string and the
terminating NULL.  To prevent overruns, the size of the array may be specified
by a decimal number between the ``&percnt;'' and the ``s'' or by a ``&num;''.
If the length of the array is specified with a ``&num;'' then the actuall
length is read from ppr&lowbar;sscanf()'s next argument (the one before the pointer to
the char array).
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;S</Term>
<ListItem>
<Para>
read characters up to the next whitespace, allocate memory, and
store them in the allocated memory.  The argument should be a pointer to a char
pointer which will be set to the address of the allocated memory.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;z</Term>
<ListItem>
<Para>
read characters up to the end of the string.  The argument
should be a char array.  To prevent overruns, the size of the char array may be
specified in the same manner as for the &percnt;s format.
</Para>
</listitem>
</VarListEntry>

<VarListEntry>
<Term>&percnt;Z</Term>
<ListItem>
<Para>
read characters up to the end of the string, allocate storeage
for them, and copy them into that storage.  The argument should be a pointer to
a pointer to a char array.
</Para>
</listitem>
</VarListEntry>

</VariableList>

</Sect3>

<Sect3>
<Title>ppr&lowbar;get&lowbar;nodename()</Title>

<Para>
This function should return the node name which other nodes will use when
sending jobs to this node.  In the current implementation this is the system
name truncated before the first period (if present) and furthur truncated to 16
characters.
</Para>

</Sect3>

<Sect3>
<Title>fname&lowbar;sprintf()</Title>

<Para>
This is a special version of sprintf().  It will never write more than
MAX&lowbar;PATH characters.  It only understands &percnt;s and &percnt;d.  On
MS-Windows systems it will convert ``:'' to ``!'' because they are confused
by colons in filenames.
</Para>

</Sect3>

</Sect2>

</Sect1>

<Sect1>
<Title>Protocol for Comunicating with <Emphasis remap="bf">pprd</Emphasis> and <Emphasis remap="bf">rpprd</Emphasis></Title>

<Para>
This section describes the protocol which use commands such as <Emphasis remap="bf">ppr</Emphasis>,
<Emphasis remap="bf">ppop</Emphasis>, and <Emphasis remap="bf">ppad</Emphasis> use to communicate with <Emphasis remap="bf">pprd</Emphasis> and <Emphasis remap="bf">rpprd</Emphasis>.
This information may assist those attempting to understand the source code.
</Para>

<Para>
The main printing daemon, <Emphasis remap="bf">pprd</Emphasis> receives commands over a named pipe and
acts on them.  The program <Emphasis remap="bf">ppr</Emphasis> uses one such command it sends to <Emphasis remap="bf">pprd</Emphasis>
to tell it that a new jobs has been placed in the queue directories.  The
program <Emphasis remap="bf">ppad</Emphasis> has two such commands which it uses to inform <Emphasis remap="bf">pprd</Emphasis> that
a printer or group configuration file has been modified.  Finally, <Emphasis remap="bf">ppop</Emphasis>
has many commands which it uses to control <Emphasis remap="bf">pprd</Emphasis> or to request information
from it.
</Para>

<Para>
The remote printing daemon, <Emphasis remap="bf">rpprd</Emphasis> will receive commands over a named pipe
of its own.  These commands will be identical in format to those understood by
<Emphasis remap="bf">pprd</Emphasis>.
</Para>

<Sect2>
<Title>Accepting Jobs</Title>

<Para>
Once the job submission program <Emphasis remap="bf">ppr</Emphasis> has created the queue files it
sends a command to <Emphasis remap="bf">pprd</Emphasis> or <Emphasis remap="bf">rpprd</Emphasis> telling it that the job is there and
is ready for printing or transfer to the remote system.  This command takes the
form:
</Para>

<Para>
j <Emphasis remap="it">destination&lowbar;node destination&lowbar;queue id subid home&lowbar;node initial&lowbar;priority</Emphasis>
</Para>

<Para>
The <Emphasis remap="it">destination&lowbar;node</Emphasis> is the node to which the job should be sent.  If the
command is written to <Emphasis remap="bf">pprd</Emphasis>'s named pipe, this field must contain the node
name of the local system.  The <Emphasis remap="it">destination&lowbar;queue</Emphasis> is the name of the print
queue on the destination node.  The <Emphasis remap="it">id</Emphasis> and <Emphasis remap="it">subid</Emphasis> are the queue id and
the job fragment number respectively.  The <Emphasis remap="it">subid</Emphasis> will most often be zero.
The <Emphasis remap="it">home&lowbar;node</Emphasis> is the node name of the system on which the job origionated.
Jobs submitted by the program <Emphasis remap="bf">ppr</Emphasis> to <Emphasis remap="bf">pprd</Emphasis> or <Emphasis remap="bf">rpprd</Emphasis> will always
have the home node name of the local system, but jobs submitted to <Emphasis remap="bf">pprd</Emphasis> by
<Emphasis remap="bf">rpprd</Emphasis> probably will not since it is one of <Emphasis remap="bf">rpprd</Emphasis>'s jobs to accept jobs
from remote systems.
</Para>

</Sect2>

<Sect2>
<Title>Re-loading Configuration Files</Title>

<Para>
Whenever a printer or group configuration files is modified or a new one
created, <Emphasis remap="bf">pprd</Emphasis> must be directed to read it.  To inform <Emphasis remap="bf">pprd</Emphasis> that it
must read a new or revised printer configuration file, a command line of this
form is sent:
</Para>

<Para>

<Screen>
NP <Emphasis remap="it">printername</Emphasis>
</Screen>

</Para>

<Para>
To indicate that a group configuration file
must be re-read or that a new group configuration file must be read for the
first time:
</Para>

<Para>

<Screen>
NG <Emphasis remap="it">groupname</Emphasis>
</Screen>

</Para>

<Para>
There will be no acknowledgement of either command.
</Para>

</Sect2>

<Sect2>
<Title>Yielding Information to <Emphasis remap="bf">ppop</Emphasis></Title>

<Para>
The utility <Emphasis remap="bf">ppop</Emphasis> must communicate with <Emphasis remap="bf">pprd</Emphasis> and <Emphasis remap="bf">rpprd</Emphasis> in
order to list the queue, show the status of printers, mount forms, and do other
tasks.  As work on <Emphasis remap="bf">rpprd</Emphasis> continue, descriptions of the necessary commands
will be added to this document.
</Para>

</Sect2>

<Sect2 id="fontsub">
<Title>Font Substitution Configuration File</Title>

<Para>
This file resides in the directory <Literal remap="tt">/usr/ppr/lib</Literal>.  It is
replaced whenever a new version of PPR is installed, so if you modify
it you should keep a copy of your modifications elsewhere.
</Para>

<Para>
The file contains a list of PostScript font names and possible substitute
fonts.
</Para>

<Para>
Any line that has ``<Literal remap="tt">&num;</Literal>'' or ``<Literal remap="tt">;</Literal>'' in the first column is a comment.
Blank lines are ignored.  A font substitution record begins with the name of
the font for which there are substitutes.  The name should start in column
one and be on a line by
itself.  The list of possible substitutes follows, one per line.  Each
substitute font line should start with a space or tab.  You may list as many
substitute fonts as you like.  The first substitute font to be found in the
printer's PPD file, in the cache directories or in the index created with
<Emphasis remap="bf">indexttf</Emphasis> will be used.
</Para>

<Para>
Here is an example of four records which indicate that the IBM Courier fonts are
suitable substitutes for the Adobe Courier fonts:
</Para>

<Para>

<Screen>
Courier
IBMCourier
Courier-Bold
IBMCourier-Bold
Courier-Oblique
IBMCourier-Italic
Courier-BoldOblique
IBMCourier-BoldItalic
</Screen>

</Para>

<Para>
You have the option of specifying a PostScript transform matrix to be applied to
the substitute font.  Generally this will be used to adjust the width.  The
should appear on the substitute font line, after the substitute font name.  Here
is an example:
</Para>

<Para>

<Screen>
Helvetica-Condensed
Helvetica &lsqb;0.80 0 0 1 0 0]
Helvetica-Condensed-Bold
Helvetica-Bold &lsqb;0.80 0 0 1 0 0]
Helvetica-Condensed-Oblique
Helvetica-Oblique &lsqb;0.80 0 0 1 0 0]
Helvetica-Condensed-BoldOblique
Helvetica-BoldOblique &lsqb;0.80 0 0 1 0 0]
</Screen>

</Para>

<Para>
This approximates Helvetica Condensed by scaling Helvetica to 80&percnt; of
its normal width.  The role of the other members of the matrix, refer to the
PostScript language reference manual.
</Para>

</Sect2>

<Sect2>
<Title>MetaFont Modes Configuration File</Title>

<Para>
This file <Literal remap="tt">mfmodes.conf</Literal> is used by <Emphasis remap="bf">ppad</Emphasis> when setting the default
filter options.  Specifically, the <Emphasis remap="bf">mfmode=</Emphasis> option is selected with the
aid of this file.  The <Emphasis remap="bf">mfmode=</Emphasis> option is used by the
DVI filter to select an appropriate MetaFont mode for a given printer.
</Para>

<Para>
Before consulting this file, <Emphasis remap="bf">ppad</Emphasis> reads the printer's PPD file and extracts
the values from the following lines:
</Para>

<Para>

<Screen>
*Product:
*ModelName:
*NickName:
*DefaultResolution:
</Screen>

</Para>

<Para>
The extracted values are then compared to values on lines in the <Literal remap="tt">mfmodes.conf</Literal>
file.  Each line in the <Literal remap="tt">mfmodes.conf</Literal> file has the following format:
</Para>

<Para>

<Screen>
<Emphasis remap="it">product</Emphasis>:<Emphasis remap="it">modelname</Emphasis>:<Emphasis remap="it">nickname</Emphasis>:<Emphasis remap="it">resolution</Emphasis>:<Emphasis remap="it">mfmode</Emphasis>
</Screen>

</Para>

<Para>
The file is read top to bottom until a match is found or the end is reached.
The information from the PPD file is compared to the first four fields of each
line.  A ``<Emphasis remap="sf">*</Emphasis>'' may be used as a wildcard in any or all of the first four fields.
When a match is found, the value from the fifth field is used as the value for
the default filter option <Emphasis remap="bf">mfmode=</Emphasis>.
</Para>

<Sect3>
<Title>Identification by Product</Title>

<Para>
The <Emphasis remap="sf">*Product:</Emphasis> line from the PPD file generally identifies the manufacturer and
model line of which the printer is a part.  Since all printers which use one
product string generally use the same print mechanism, this parameter alone is
usually enough to make selection of the correct MetaFont mode possible.  For
this reason, most entries in the <Literal remap="tt">mfmodes.conf</Literal> file will have the <Emphasis remap="it">product</Emphasis>
field filled in but the <Emphasis remap="it">modelname</Emphasis>, <Emphasis remap="it">nickname</Emphasis>, and <Emphasis remap="it">resolution</Emphasis> fields will
all be ``<Emphasis remap="sf">*</Emphasis>''.
</Para>

<Para>
For example, the following line:
</Para>

<Para>

<Screen>
LaserJet 4:*:*:*:ljfour
</Screen>

</Para>

<Para>
will match if the <Emphasis remap="sf">*Product:</Emphasis> line from the PPD file has a value of
``<Emphasis remap="sf">(LaserJet 4)</Emphasis>''.  The fact that fields two through four contain astrisks indicates that any
value is acceptable for product, modelname, and resolution.
</Para>

</Sect3>

<Sect3>
<Title>Identification by ModelName</Title>

<Para>
The GhostScript interpreter has a product string of ``Ghostscript''
or ``Alladin GhostScript''.  Therefor, the printer must be identified by means of its PPD
files <Emphasis remap="sf">*ModelName:</Emphasis> line.  Here are some reasonable configuration lines for
printers driven by Ghostscript:
</Para>

<Para>

<Screen>
*:Dot Matrix 24 pin Ghostscript:*:*:NEChi
*:HP LaserJet III Ghostscript:*:*:CanonCX
*:HP DeskJet 500 Ghostscript:*:*:HPDeskJet
</Screen>

</Para>

</Sect3>

<Sect3>
<Title>Identification by NickName</Title>

<Para>
In a PPD file obtained from Adobe or the printer's manufacture,
the <Emphasis remap="sf">*NickName:</Emphasis> line is identical to the <Emphasis remap="sf">*ModelName:</Emphasis> line.
You might change it if you make a special hacked-up copy of
the PPD file for a particular printer.  For example, you might change it to
``David's HP DeskJet 500 Ghostscript''.
</Para>

<Para>
There are valid reasons for using a modified PPD file, but why changes to the
PPD file should dictate a different MetaFont mode is hard to say.  (Changes to
the ``*DefaultResolution:'' line are covered by the next section.)  Unless you
know a good reason not to, you should always put a "*" in this field.
</Para>

</Sect3>

<Sect3>
<Title>Identification by Resolution</Title>

<Para>
Generally, you can just put ``<Emphasis remap="sf">*</Emphasis>'' in the <Emphasis remap="it">resolution</Emphasis> field.  There
are however two possible reasons for filling in the value from the PPD file's
<Emphasis remap="sf">*DefaultResolution:</Emphasis> line.
</Para>

<Para>
One is if the printer's resolution can be changed.  A change in resolution
requires a change in the MetaFont mode.  You might have several different PPD
files for the same make and model of printer, one for each resolution.  Here is
a (fictitous) example:
</Para>

<Para>

<Screen>
*:HP LaserJet III Ghostscript:*:300dpi:CanonCX
*:HP LaserJet III Ghostscript 150DPI:*:150dpi:ljlo
</Screen>

</Para>

<Para>
The other reason for putting a value other than ``<Emphasis remap="sf">*</Emphasis>'' in the
<Emphasis remap="it">resolution</Emphasis> field
is if the line is one at the end of the file which is intened to to be a best
guess for printers which have not matched any of the lines above.  These are
some reasonable last resort lines:
</Para>

<Para>

<Screen>
*:*:*:300dpi:CanonCX
*:*:*:600dpi:ljfour
*:*:*:360dpi:NEChi
</Screen>

</Para>

</Sect3>

<Sect3>
<Title>Selecting MetaFont Mode Names</Title>

<Para>
The MetaFont mode names in the <Literal remap="tt">mfmodes.conf</Literal> file that comes with PPR are
taken from the <Literal remap="tt">modes.mf</Literal> file maintained by Karl Berry.  A recent version
of his <Literal remap="tt">modes.mf</Literal> file is distributed with the PPR source code, in the
<Literal remap="tt">misc</Literal> directory.  His file defines a number of aliases for each mode.  When
adding entries to PPR's <Literal remap="tt">mfmodes.conf</Literal> file you should try not to use two
different names that both refer to the same mode in <Literal remap="tt">modes.mf</Literal> because that
would result in the generation of duplicate sets of identical pk font files.
The <Literal remap="tt">mfmodes.conf</Literal> file supplied with PPR always uses the first alias from
Karl Berry's <Literal remap="tt">modes.mf</Literal> file which may be abtained from
<Emphasis remap="bf">ftp://ftp.tug.org/tex/modes.mf</Emphasis>.
</Para>

</Sect3>

</Sect2>

</Sect1>

</Article>

