<!--
Filename: pprhack_theory.sgml
Last Modified: 16 October 2005
Last Proofread: 
-->

<sect1>
<title>Theory of Operation</title>

<para>This section describes how the various components of <application>PPR</application> 
work together.</para>

<sect2>
<title>How Jobs Enter the Queue</title>

<para>
All jobs which enter the queue pass through the program called
<command>ppr</command>.  This is true even of those which pass first through the
Macintosh print server, the LPR compatible server, or Samba.  (These additional
server components will be described later.)  The program <command>ppr</command> reads a
PostScript file and creates several files which contain the text of the job
and information indexes of the job text..  These files are placed in a
spool directory and an additional file, called the queue file, is created which
describes the job and the options the user has selected.  Once all the files
are ready, <command>ppr</command> sends a message to the print daemon
<command>pprd</command> telling it that a new job is in the queue.  This process is
illustrated in figure <xref linkend="pprdoc-enter"/>.
</para>

<para>

<figure id="pprdoc-enter">
<title>A job Enters the Queue</title>
<mediaobject>
	<imageobject><imagedata fileref="pprdoc-enter.eps" format="eps"/></imageobject>
	<imageobject><imagedata fileref="pprdoc-enter.png" format="png"/></imageobject>
</mediaobject>
</figure>

</para>

</sect2>

<sect2>
<title>How Jobs are Printed</title>

<para>When <command>pprd</command> determines that the time has come to print a file on a printer,
it invokes a program called <command>pprdrv</command> which reads the 3 job files and
reasembles them into a PostScript file.  While doing so it will consult
information read from the printer configuration file and the queue file and
a PostScript Printer Description (PPD) file.  It may also include fonts and
other resources in the data stream.  This process is illustrated in figure <xref
linkend="pprdoc-printing2"/>.  (The inclusion of fonts and other resources has been
ommited from the figure for the sake of simplicity.)</para>

<para>

<figure id="pprdoc-printing2">
<title><application>PPR</application> Prints a Job</title>
<mediaobject>
	<imageobject><imagedata fileref="pprdoc-printing2.eps" format="eps"/></imageobject>
	<imageobject><imagedata fileref="pprdoc-printing2.png" format="png"/></imageobject>
</mediaobject>
</figure>

</para>

<figure id="pprdoc-printing1">
<title>Multiple Instances of <command>pprdrv</command> for Multiple Printers</title>
<mediaobject>
	<imageobject><imagedata fileref="pprdoc-printing1.eps" format="eps"/></imageobject>
	<imageobject><imagedata fileref="pprdoc-printing1.png" format="png"/></imageobject>
</mediaobject>
</figure>

<para>The program <command>pprdrv</command> sends the file to the printer by
invoking an interface program.  It is the responsibility of the interface
program to accept the print job on standard input, send it the printer, if
possible receive any error messages, and pass them back to
<command>pprdrv</command> by writing them to stdout.</para>

<para>
Notice in figure <xref linkend="pprdoc-printing1"/> that printing is taking place on
<hardware>PRINTER 1</hardware> and <hardware>PRINTER 3</hardware>.
</para>

<para>
<hardware>PRINTER 2</hardware> is idle, so the processes necessary to print on it are shown
with dotted line boxes, indicating that they do not exist at present.
</para>

<para>
Once the job has been printed, the interfaces program exits, after which
<command>pprdrv</command> exits.  The main spooling daemon,
<command>pprd</command> detects this and
removes the job from the queue and attempts to inform the user that the job is
done.
</para>

</sect2>

<sect2>
<title>Job Errors</title>

<para>When exiting, <command>pprdrv</command> will return an exit code which indicates to
<command>pprd</command> whether printing was successful or not.  If
the exit code indicates that a problem occured which was caused
by the particular job being printed, a PostScript error for instance, then
the job is placed in the "arrested" state, the user who submitted it is
informed, and <command>pprd</command> looks for another job to print on that
printer.  The arrested state is a special case of the "held" state.  An
arrested job remains in that state until it is canceled or released.</para>

<para>
When a job is arrested, the user who submitted it is informed, however if
the arrested job is subsequently deleted by an operator, the user will not
be informed as he would be if a normal job of his were canceled.
</para>

</sect2>

<sect2 id="printer-errors">
<title>Printer Errors</title>

<para>
If <command>pprdrv</command> indicates that the problem is with the printer, then the job
is returned to the queue, the printer is placed in fault mode, and
<command>pprd</command>
looks for another printer on which to print the job.  When
<command>pprdrv</command>
discovers a problem with a printer, it indicates to <command>pprd</command> whether or not it
is a problem from which the printer is likely to recover without the
intervention of the system operator.  Problems from which it is likely to
recover on its own include those which are transient or which an ordinary user
might correct, such as printer-turned-off and out-of-paper.  If the problem is
one from which the printer may recover, then it is placed in fault-retry mode;
if it is not expected to recover, it is placed in fault-no-retry mode.
</para>

<para>
In fault-retry mode, <command>pprd</command> tries to restart the printer at intervals.  The
delay before the retry is 10 seconds the first time and increases by 10 seconds
after each failure until the interval reaches about 10 minutes, at which point
it does not continue to increase.  In fault-no-retry mode, the printer is not
restarted until a system operator restarts it.  An operator may restart a
printer with the command <command>ppop start printer</command>.
</para>

<para>
When <command>pprdrv</command> detects a printer fault, it writes a description of it to a
file in the <filename class="Directory">alerts/</filename> directory, a file which is named after the
printer.  At intervals, <command>pprd</command> may send the contents of this file to a
system operator.  The interval is defined in the printer configuration file.
The interval is expressed as 'every <varname>N</varname> faults.'  If the interval is set
to <literal>1</literal>, the alerts log is sent after each printer fault; if the interval is set
to <literal>5</literal>, the alerts log is sent after every 5th printer fault.  If the interval is
set to <literal>0</literal>, the alerts are never sent.
</para>

<para>
If the alert interval is negative, it is treated differently.  First of all,
the absolute value is used as the alert interval.  Second, the alerts are
only sent to the system operator once.  Third, a notice is sent to the
system operator if the printer successfully prints a job after incurring at
least abs(<varname>N</varname>) alerts.
</para>

<para>
Each time a fault occurs, the alert message is appended to the alert log. The
exception is that if the previous alert occured more than one hour previously,
the alert log is truncated to zero length and a new one started.  Whether or
not the alerts have been dispatched to an operator, the alert log may be read
at any time with the command <command>ppop alerts <replaceable>printer</replaceable></command>.
</para>

<para>
It is in the printer configuration file that the alert interval is specified,
as well as the method by which alerts are to be dispatched and the address to
send them to.  A typical alert dispatch method (indeed, the only one supported
at this time) is <literal>mail</literal>.  This means that the alerts are sent by electronic
mail to the indicated address.  The alert parameters may be set with the
<command>ppad alerts</command> command.
</para>

</sect2>

<sect2>
<title>Accepting Jobs From a Network</title>

<para>Users on the machine running <application>PPR</application> can submit
jobs simply by running the program <command>ppr</command>.  But, when the
user is on a remote machine connected by a network to the machine with the
<application>PPR</application> spooler, things get a little more
complicated.</para>

<para>
Accepting network jobs requires a daemon process which waits new connexions.
When it receives a connexion, it must launch a server process.  The server
process will accept the print job and run <command>ppr</command> to submit it.
</para>

<sect3>
<title>Accepting Jobs From Macintoshes</title>

<para><application>PPR</application> provides a daemon called
<command>papd</command> which acts as a Macintosh print server.  It accepts
connexions from Macintosh clients, answers queries using information in the PPD
files, and accepts jobs.  Whenever <command>papd</command> accepts a
connexion from a Macintosh, it forks a copy of itself to service the connexion.
When the child daemon receives a print job, it launches <command>ppr</command>
on the end of a pipe to process it.</para>

</sect3>

<sect3>
<title>Accepting Jobs Using the LPD Protocol</title>

<para><application>PPR</application> provides a daemon called
<command>lprsrv</command> which can be launched by the internet super daemon,
<command>inetd</command>.  The daemon <command>lprsrv</command> implements the
Berkeley LPD protocol.</para>

</sect3>

<sect3>
<title>Accepting Jobs From a Samba Server</title>

<para>The free Unix file and print server Samba has a very flexible printing
system.  The print command for any given print queue can be specified in
Samba's configuration file.  The Samba server sends jobs to
<application>PPR</application> by writing the job to a temporary file and then
invoking <command>ppr</command>.  The <option>-U</option> switch should be used
to tell <command>ppr</command> to delete the temporary file once it is done
reading it.  It is advisable to append <literal>&amp;</literal> to the print
command because for very large files which must be filtered, the client will
time out before <command>ppr</command> exits.  Sample Samba print commands are
given in the <ulink url="../refman/ppr2samba.8.html">ppr2samba(8)</ulink> man
page.</para>

</sect3>

</sect2>

</sect1>
