<!--
Filename: pprhack_interfaces.sgml
Last Modified: 29 March 2005
Last Proofread: never
-->

<sect1 id="interfaces">
<title>Printer Interface Programs</title>

<para>This section provides the information you will need to write a
<application>PPR</application> printer interface program.  An interface is a
program, possibly a shell script, which receives the text of the print job
from <command>pprdrv</command> and sends it to the printer.  The interface
program will receive the print job text on stdin.</para>

<para>The interface program should should print any data received from the
printer on stdout which will cause them to be sent to
<command>pprdrv</command> for analysis.  The interface program may print
additional specially formatted messages on stdout in order to inform
<command>pprdrv</command> of its progress or the current status of the
printers.  Any messages which <command>pprdrv</command> does not recognize
as a progress or status message will be appended to the print job's log
file.</para>

<para>The interface program will receive command line parameters which
include the name of the printer, the printer's address, interface program
options, and other parameters which describe certain aspects of
<command>pprdrv</command>'s intended interaction with the printer.</para>

<para>The interface program may append messages to the printer's log file by
calling the <function>alert()</function>.  It should do this to report
invalid command line parameters or unexpected problems communicating with
the printer.</para>

<para>The interface program must return an exit codes in order to inform
<command>pprdrv</command> of its success or failure.  If the code indicates
failure, then <command>pprdrv</command> will adopt the exit code as its own. 
If the code indicates success, then <command>pprdrv</command> will adopt it
only if it too achieved success.</para>

<figure id="interfaces1">
<title>
	A typical Printer Interface Program acts as an intermediary between
	<command>pprdrv</command> and a PostScript printer.  It communicates
	with the printer by using TCP/IP and SNMP.
</title>
<mediaobject>
	<imageobject><imagedata fileref="pprhack_interfaces1.eps" format="eps"/></imageobject>
	<imageobject><imagedata fileref="pprhack_interfaces1.png" format="png"/></imageobject>
</mediaobject>
</figure>

<para>Some interface programs have a special probe mode.  In probe mode they don't connect to
the printer, but instead use out-of-band means to extract identifying information from
the printer.  An interface program's probe mode is one of the ways the
<command>ppad ppdq</command> and <command>ppad ppd query</command> commands
attempt to identify the printer in order to recommend an appropriate PPD
file.</para>

<para>In the remainder of this sections, the way an interface program ought
to work is explaned in more detail.</para>

<sect2>
<title>The Command Line Parameters</title>

<para>There are 11 parameters in all.  That seems a lot, but it is perfectly
acceptable to write an interface which uses only the first two.  Most also
examine parameters four through six to make sure that they are compatible with
the protocol used when communicating with the printer.</para>

<para>If the interface program determines that the values of parameters four
through six are unacceptable, it should call <function>alert()</function> to 
post an explanatory message to the printer's alert log and then exit with the
code <errorcode>EXIT_PRNERR_NORETRY_BAD_SETTINGS</errorcode>.</para>

<para>Some of the parameters are small integers which represent enumerated
values.  These values are defined symbolically in the C include file
<filename>include/interface.h</filename> and in the shell script fragment
<filename>interface.sh</filename>.</para>

<para>The order to some of the parameters between 7 and 11 inclusive changed
with <application>PPR</application> 2.00.  Also, the name and semantics of what is now
parameter number 7 changed slightly.</para>  

<sect3>
<title>Parameter One--The Printer's Name</title>

<para>The interface is invoked with the first parameter set to the name of the
printer.  The interface should use this name when posting alerts using either
the alert() function in <filename>libppr.a</filename> or
<filename>/usr/lib/ppr/alert</filename>.</para>

</sect3>

<sect3>
<title>Parameter Two--The Printer's Address</title>

<para>The second parameter is set to the string following the
<literal>Address:</literal> keyword in the printer configuration file.  </para>

<para>What constitutes a syntatically valid address is entirely up to the
designer of the interface program.  If the address is syntactically invalid,
the interface must call <function>alert()</function> to post an error message
to that effect and then exit returning the code
<errorcode>EXIT_PRNERR_NORETRY_BAD_SETTINGS</errorcode>.</para>

</sect3>

<sect3>
<title>Parameter Three--The Interface Options</title>

<para>The third parameter is set to the string following the
<literal>Options:</literal> keyword in the printer's configuration file. 
This will be zero or more space separated name=value pairs.</para>

<para>The set of valid options and acceptable values is determined by the
designer of the interface program.  However, when devising options for a new
interface program, he should be aware of the options of similiar existing
interfaces and avoid creating new options or option sementics.  If the
interface program does not recognize one or more of the options or finds an option with
an invalid or out-of-range value, it must call <function>alert()</function> to
post an error message to that effect and then exit with the value
<errorcode>EXIT_PRNERR_NORETRY_BAD_SETTINGS</errorcode>.</para>

</sect3>

<sect3>
<title>Parameter Four--The JobBreak Value</title>

<para>The fourth parameter is the value from the printer configuration
file's <literal>JobBreak:</literal> line.  This value is a small integer
representing an enumerated value.  The <literal>JobBreak:</literal> line is
set with the command <command>ppad feedback</command>.</para>

<para>Most job break values do not require any special action on the part of
the interface.  However, it is a good idea for the interface program to test
for jobbreak settings with which it is known to be incompatible.  It should
only check for settings <emphasis>known</emphasis> to be incompatible.  It
should <emphasis>not</emphasis> limit jobbreak settings to a list of those
known to be compatible since other, compatible settings may be added in
future versions of <application>PPR</application>.  The various possible
jobbreak settings are described in the ppad(8) man page under the
section for the <command>ppad jobbreak</command> command.  Most interfaces
will only be incompatible with <command>JOBBREAK_SIGNAL</command> and
<command>JOBBREAK_SIGNAL_PJL</command>.</para>

<para>The jobbreak methods <command>JOBBREAK_SIGNAL</command> and
<command>JOBBREAK_SIGNAL_PJL</command> require explicit support in the
interface program.  The interface <command>atalk</command> is the only one
supplied with <application>PPR</application> which does this.  If it detects
that one of these jobbreak methods is in use, it will send its parent
(<command>pprdrv</command>) SIGUSR1 as soon as it has established its own
SIGUSR1 handler. Thereafter, whenever it receives SIGUSR1, it will read all
bytes currently available from the pipe, send them to the printer and then
send the printer an end of job indication.  When <command>atalk</command>
receives an acknowleding end of job indication from the printer, it should
sends <command>pprdrv</command> SIGUSR1.  This handshaking method is
necessary because the PAP (AppleTalk Printer Access Protocol) end of file
marker has no representation in the byte stream.  Instead it is sent
out-of-band by setting a special flag in the header of the packet.</para>

</sect3>

<sect3>
<title>Parameter Five--The Feedback Value</title>

<para>The fifth is the value from the printer configuration file's
<literal>Feedback:</literal> line.  It is zero if the printer is incapable
of sending data back to the computer running PPR over the communications
line, non-zero if it is capable. The <literal>Feedback:</literal> line is
set with the <command>ppad feedback</command> command.</para>

<para></para>

</sect3>

<sect3>
<title>Parameter Six--The Codes value</title>

<para>The sixth parameter is the value from the printer configuration file's
<literal>Codes:</literal> line.  The value is a small integer representing
an enumerated value.  The <literal>Codes:</literal> line is set with the
command <command>ppad codes</command>.</para>

<para>This parameter indicate the set of byte values which
<command>pprdrv</command> believes that the interface program and the
communications channel are capable of conveying all the way to the
PostScript interpreter.  It is recommended that the interface program
examine the codes value and abort if the interface and the communications
channel are not capable of passing the set of codes indicated.</para>

</sect3>

<sect3>
<title>Parameter Seven--The File Type</title>

<para>The tenth parameter indicates the type of the file which the interface 
program will be reading from stdin, that is, the file which the interface 
program is begin asked transmit to the printer.</para>

</sect3>

<sect3>
<title>Parameter Eight--The Routing Instructions</title>

<para>The eight parameter is set the the text of the
<literal>%%Routing:</literal> comment in the print job.  If the
<literal>%%Routing:</literal> comment is absent, then this parameter will be
blank.  The routing comment is intended to convey delivery instructions to a
human printer operator.  For example, its value might be "deliver to room 101".
If your interface program can somehow make this message appear on an operator
console, it may do so.  If it is an interface to an outgoing fax modem, then it
might be reasonable for it to read the telephone number from this parameter.
This is acceptable because a telephone number can be considered a delivery
instruction.  This parameter should not be used for any purpose other than to
indicate wither the printed job should be sent.  Particularly, it should not be
used as a way to pass options which control the printing process.</para>

</sect3>

<sect3>
<title>Parameter Nine--The LPR Job Name</title>

<para>The seventh parameter is set to the name of the job.  (For example,
<literal>chipmunk-148.0</literal>.
This parameter is provided for the
<command>lpr</command> interface which passes this information on to the remote spooler.</para>

</sect3>

<sect3>
<title>Parameter Nine--The LPR User's Name</title>

<para>The ninth parameter is the text of the name of the user to whom the
job belongs.
This parameter is provided for the
<command>lpr</command> interface which passes this information on to the remote spooler.</para>

</sect3>

<sect3>
<title>Parameter Eleven--The LPR Job Title</title>

<para>The eleventh parameter is the job title.
This parameter is provided for the
<command>lpr</command> interface which passes this information on to the remote spooler.</para>

</sect3>

</sect2>

<sect2>
<title>Help in Parsing the Command Line</title>

<para>The interface command line in not particularly difficult to parse, but
you might find it helpful to use the library functions which those
interfaces which come with <application>PPR</application> and are written in
C use.  To use it, include the file <filename>libppr_int.h</filename> and
call the function <function>int_cmdline_set()</function> from
<function>main()</function> like this:</para>

<programlisting>
int_cmdline_set(argc, argv);
</programlisting>

<para>Once you have do this, the parameters will be available to you as
members of the global structure <varname>int_cmdline</varname>.  The
structure <varname>int_cmdline</varname> is an instance of
<varname>INT_CMDLINE</varname>, which is defined below:</para>

<programlisting>
struct INT_CMDLINE
	{
	gu_boolean probe;			/* TRUE if --probe used */
	const char *int_name;		/* example: "interfaces/atalk" */
	const char *int_basename;	/* example: "atalk" */
	const char *printer;		/* example: "myprn" */
	const char *address;		/* example: "My Laser Printer:LaserWriter@Computing Center" */
	const char *options;		/* example: "idle_status_interval=60 open_retries=5" */
	int jobbreak;				/* example: 1 (JOBBREAK_SIGNAL) */
	gu_boolean feedback;		/* example: 1 (TRUE) */
	enum CODES codes;			/* example: 3 (CODES_Binary) */
	const char *PDL;			/* example: "postscript" */
	const char *routing;		/* example: "Call David Chappell at 2114 when ready" */
	const char *jobname;		/* example: "myprn-1001.0" */
	const char *forline;		/* example: "David Chappell" */
	const char *title;			/* example: "My Print Job" */
	} ;
</programlisting>

<para>It is now very easy to write code that refers to the command line
parameters by name.  For example, if your interface program doesn't support
probe mode, bidirectional communication, or the jobbreak methods signal and
signal/pjl, you could put this right after the call to
<function>int_cmdline_set()</function>:</para>

<programlisting>
if(int_cmdline.probe)
	{
	fprintf(stderr,
		_("The interface program \"%s\" does not support probing.\n"),
		int_cmdline.int_basename
		);
	exit(EXIT_PRNERR_NORETRY_BAD_SETTINGS);
	}

if(int_cmdline.feedback)
	{
	alert(int_cmdline.printer, TRUE,
		_("The PPR interface program \"%s\" is incapable of sending feedback."),
		int_cmdline.int_basename
		);
	exit(EXIT_PRNERR_NORETRY_BAD_SETTINGS);
	}

if(int_cmdline.jobbreak == JOBBREAK_SIGNAL || int_cmdline.jobbreak == JOBBREAK_SIGNAL_PJL)
	{
	alert(int_cmdline.printer, TRUE,
		_("The jobbreak methods \"signal\" and \"signal/pjl\" are not compatible with\n"
		"the PPR interface program \"%s\"."), int_cmdline.int_basename);
	exit(EXIT_PRNERR_NORETRY_BAD_SETTINGS);
	}
</programlisting>

</sect2>

<sect2>
<title>The Return Codes</title>

<para>The exit codes which interface programs should use are defined in
<filename>include/interface.h</filename> and <filename>/usr/lib/ppr/interface.sh</filename>.</para>

<variablelist>

<varlistentry>
	<term><errorcode>EXIT_PRINTED</errorcode></term>
	<listitem>

	<para>This interface program should return this code if it was able
	to complete its jobs successfully.  It doesn't actually mean that the
	interface knows the job was printed successfully, just that it was
	able to do its part.  When it receives this exit code,
	<command>pprdrv</command> will exit with the same code if the
	interface program accepted all of the job data before exiting and if
	no other error was detected (such as a PostScript error).</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR</errorcode></term>
	<listitem>

	<para>If the interface was unable to connect to the printer or the
	connection was broken off, it may return this code.  The printer
	will be fault-auto-retry mode.  This is the catchall code.  If there
	is a code listed below which better fits the specific circumstance,
	it would be better to return that code.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NORETRY</errorcode></term>
	<listitem>

	<para>There was a printer error caused by a circumstance which will
	not disappear spontainiously, such as a syntactically invalid
	printer address.  The printer will be placed in fault-no-auto-retry
	mode.  Like EXIT_PRNERR, this is a catch-all code.  If there is a
	code listed below that better fits the specific circumstance, then
	it would be better to return that code.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_JOBERR</errorcode></term>
	<listitem>

	<para>This code is normally only used by <command>pprdrv</command>. 
	Very few interfaces would ever have cause to return this error
	code.</para>

	<para>Since PostScript errors are detected by
	<command>pprdrv</command> by watching for messages from the
	PostScript interpreter in the data stream which the interface
	receives from the printer and prints on stdout, there is no need for
	the interface to detect PostScript errors or to report them using
	this exit code.</para>

	<para>But, if the interface detects an error and has some kind of
	information which definitely indicates that the fault was caused by
	the job being printed, it should return this code.  The job will be
	"arrested" and held for inspection by the operator.</para>

	<para>One of the few types of interfaces which might return this
	code is an interace to a fax server.  It might return this code if
	the phone number (possibly passed as a routing instruction) turned
	out to be invalid.  In such a case it could print a message to that
	effect to stdout (which leads into the jobs log file) and then
	return this code.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_SIGNAL</errorcode></term>
	<listitem>

	<para>When a job is canceled during printing or the printer is
	forced to halt during printing, <command>pprdrv</command> sends
	SIGTERM to the interface program.  The interface program has the
	option of catching the signal and performing shutdown operations
	before termination.  After the shutdown is finished, it should
	return this code.  Note that an interface program is not required
	to catch the signal.  Simply dieing is perfectly acceptable.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_ENGAGED</errorcode></term>
	<listitem>

	<para>If the interface was unable to connect to the printer because
	it was busy or off-line, it should return this code.  The printer
	state will be set to "otherwise engaged or off-line" and the
	operation will be retried after a short delay.</para>

	<para>Normally this code will be used when a definite indication is
	present that the printer is turned on and connected but is not ready
	to open a session.  If there is no indicatation that the printer
	even exists, then the code
	<errorcode>EXIT_PRNERR_NOT_RESPONDING</errorcode> is more
	appropriate.  For example, a TCP connect attempt results in
	"connection refused", this code is probably appropriate.  If however
	no response at all is received (i.e., the connexion attempt times
	out), then <errorcode>EXIT_PRNERR_NOT_RESPONDING</errorcode> is more
	appropriate.</para>

	<para>An interface should not call <function>alert()</function> if
	it intends to exit with this code.  An engaged printer isn't
	considered a condition worthy of notation in the printer's alerts
	log.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_STARVED</errorcode></term>
	<listitem>

	<para>If the interface program cannot perform its function because a
	it cannot obtain a sufficient quantity of a finite system resource
	such as RAM or file descriptors, it should exit with this code.  It
	should not call <function>alert()</function> since the problem is not
	related to the printer.  Since the condition is presumably
	temporary, the operation will be retried after a short delay.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NORETRY_ACCESS_DENIED</errorcode></term>
	<listitem>

	<para>If when the interace program attempts to connect to the
	printer it receives unambiguous notification that the connection is
	refused on the basis of of access control rules or failure to
	successfully complete an authenticaition process, then it should call
	<function>alert()</function> to append a suitable message to the
	printers alert log and then exit with this code.  Since correcting
	this condition will require administrator intervention (either by
	reconfiguring the printer itself to allow access reconfiguration the
	print queue to supply the necessary credentials), the operation will
	not be retried.  Once the problem has been corrected, the command
	<command>ppop start</command> must be used to restart the printer
	queue.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NOT_RESPONDING</errorcode></term>
	<listitem>

	<para>If the printer did not respond to the connexion attempt in any
	way, then the interface program should call
	<function>alert()</function> in order to append an appropriate message
	to the printers alerts log and then exit with this code.  The
	printer will be show to be in an error state and the operation will
	be retried after a delay.</para>

	<para>If the printer responded indicating that it was unready or
	unwilling to accept the connection, then a different error code such
	as <errorcode>EXIT_PRNERR_ENGAGED</errorcode> or
	EXIT_PRNERR_NORETRY_ACCESS_DENIED should be used instead.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NORETRY_BAD_SETTINGS</errorcode></term>
	<listitem>

	<para>If the interfaces finds that any of parameters two through six
	are syntactically incorrect, or logically incompatible, or have
	values which are incompatible with the interface program or the
	means of communication with the printer, it should call
	<function>alert()</function> to append a message to the printers
	alerts log and then exit with this code.  Printing will be halted
	until an administrator changes the settings and restarts the
	printer with the <command>ppop start</command> command.</para>

	<para>The interface should not use this code to report that an
	address lookup failed.  The code
	<errorcode>EXIT_PRNERR_NO_SUCH_ADDRESS</errorcode> should be used
	instead.  The only address problem that should be reported with this
	code is an unparsable address.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NO_SUCH_ADDRESS</errorcode></term>
	<listitem>

	<para>This exit code should be used if an attempt to look up the
	specified printer address fails.  This code should be used if no
	answer was received, the failure might be temporary, or the failure
	may indicate that the device is simply turned off.  An appropriate
	message should be posted to the printers alerts log by calling
	<function>alert()</function>.  The operation will be retried after a
	delay.</para>

	<para>If the result is definite information that a printer with the
	indicated address does not exist, then
	<errorcode>EXIT_PRNERR_NORETRY_NO_SUCH_ADDRESS</errorcode> should be
	used instead.</para>

	</listitem>
</varlistentry>

<varlistentry>
	<term><errorcode>EXIT_PRNERR_NORETRY_NO_SUCH_ADDRESS</errorcode></term>
	<listitem>

	<para>This code should be used when printer address lookup results
	in an answer which unambiguously indicates that the address does not
	exist.  An appropriate message should be posted to the printers
	alerts log by calling <function>alert()</function>.  The operation
	will not be retried until an operator intervens by running the
	<command>ppop start</command> command.</para>

	</listitem>
</varlistentry>

</variablelist>

<para>The interface program should not return any value other than those
defined above.  Any undefined value will be interpreted as a
<errorcode>EXIT_PRNERR</errorcode>.  Note that Perl's
<function>die</function> returns the code 255, which is not among those
defined above.</para>

</sect2>

<sect2>
<title>Posting Alerts</title>

<para>An interface program can post alerts to the printer's alerts log by calling
the alert() function or runing the <command>alert</command> command.  An
interface program is required to do so before exiting with any of the codes
whose names begin with <errorcode>EXIT_PRNERR</errorcode>.</para>

<para>The function <function>alert()</function> requires three or more
parameters.  The first is the name of the printer
(from <varname>argv[1]</varname>).  The second is a boolean.  One may build
up the alert message by calling <function>alert()</function> several times to
add lines to it.  This boolean should be TRUE on the first call and FALSE on
subsequent calls.  The third parameter is a <function>printf()</function>
style format string.  Any addition parameters are values for interpolation
into the format string.</para>

<para>A newline will automatically be appended to the format string.  Format
strings containing embedded newlines are an acceptable way to create
multi-line alert messages.</para>

<para>Here is a simplified example of how one might do this in C.  It is
somewhat contrived.  It verifies the address by making sure that it begins
with "/dev/".</para>

<programlisting>
if(strncmp(argv[2], "/dev/", 5) != 0)
	{
	alert(argv[1], TRUE, "Address \"%s\" is syntactically invalid.", argv[2]);
	exit(EXIT_PRNERR_BAD_SETTINGS);
	}
</programlisting>

<para>For interfaces written as shell scripts, the
<function>alert()</function> has been wrapped in a tiny program.  It may be
used like this:</para>

<programlisting>
. /interface.sh

if [ "`echo $2 | cut -c1-5`" != "/dev/" ]
	then
	./alert $1 TRUE "The address \"$2\" is syntactically invalid."
	exit(EXIT_PRNERR_BAD_SETTINGS);
	fi
</programlisting>

</sect2>

<sect2>
<title>Robust Bidirectional Operation</title>

<para>If your interface program supports bidirectional communication with the printer (which
is refered to elsewhere as "feedback"), care should be taken to avoid situations which
could cause communications to lock up.  Lockups can occur if your interface program fails
to give top priority to receiving messages from the printer.  If the printer has a large 
amount of data to transmit to the interface program, its output buffer could fill.  When 
a printer has a message to send, it will not process additional input until it has placed 
the message in its output buffer.  If your interface program refuses
to accept data from the printer until after the printer has accepted the next data block,
a lockup will occur and both parties will wait forever.  A particularly insidious 
aspect of this problem is that it will not happen every time.  It is most likely to happen
when the printer has a great deal of data to send back, such as query results or
status messages.</para>

<para>This means that your interface program must place the file descriptor connected
to the printer in non-blocking mode.  When activity is detected (perhaps by the <function>select()
</function> function), data that can be read from the desciptor must be read.  It should
then be sent out on stdout.  Since <command>pprdrv</command> lives by the same rules,
giving highest priority to the data which your interface program sends to its stdout, it is
not absolutely necessary to run stdout in non-blocking mode.</para>

<para>Your interface program must not block on reads from stdin.  This is because, after the
job has been transmitted, <command>pprdrv</command> tries to keep the connexion open until
the job is completed.  It will stop sending data.  But your interface program must go on
relaying messages from the printer to <command>pprdrv</command>.  These messages are used 
by <command>pprdrv</command> not only to keep the printer status up-to-date, but also
to determine when the job has been completed.  If your interface program blocks on stdin,
then <application>PPR</application> will likely get stuck at the end of each job.</para>

<para>The interfaces <command>tcpip</command> and <command>serial</command> are good sources
of example code.  They share a function call <function>int_copy_job()</function>.  This function
handles correct two-way communication between stdin, stdout, and the printer file descriptor.</para>

<para>In the same directory you will find several PostScript files with names such as
<filename>feedback_test1.ps</filename>.  If you print them using your interface program, then
will do things such as commanding the printer to send huge amounts of data back.  They 
will quickly smoke out interfaces with fragile two-way communication implementions.</para>

</sect2>

<sect2>
<title>Special Messages</title>

<para>There are special messages which an interface program can send to
<command>pprdrv</command> to inform it of its progress or to report the
status of the printer.  These messages are similiar to those which many
PostScript printers send back to the computer connecting to them.</para>

<para>Note that an interface program is not required to send any of these
messages.  However, their use may result in better user feedback.</para>

<variablelist>

<varlistentry>
	<term>%%[ PPR address lookup ]%%</term>
	<listitem>
		<para>This message indicates that the interface program has
		parsed its arguments without finding any problems and is not
		begining a potentially time-consuming address lookup.  This
		message is simply ignored by <command>pprdrv</command>, but
		when <command>ppad</command> is running the interface in
		probe mode it will extend the timeout after receiving this
		message.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PPR connecting ]%%</term>
	<listitem>
		<para>This message indicates that the interface is begining
		a the potentially time-consuming process of connecting to
		the printer.  When <command>pprdrv</command> receives this
		message, it sets the cooresponding flag in a status file so
		that <command>ppop status</command> will show the user that
		a connexion attempt is in progress.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PPR connected ]%%</term>
	<listitem>
		<para>This message indicate that the connexion process has
		been complete successfully.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PrinterError: <replaceable>message</replaceable> ]%%</term>
	<listitem>
		<para>Indicates that the printer is unable to print due some disabling condition
		described by <replaceable>message</replaceable>.  If it is among those listed
		in <filename>lw-messages.conf</filename>, then <command>pprdrv</command> will alter
		the printer status appropriately.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ status: <replaceable>message</replaceable> ]%%</term>
	<listitem>
		<para>Indicates a printer condition that is either normal, transient, not critical,
		or not yet critical.  If it is among those listed
		in <filename>lw-messages.conf</filename>, then <command>pprdrv</command> will alter
		the printer status appropriately.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PrinterError: out of paper ]%%</term>
	<listitem>
		<para>Indicates that the printer has gone off line because it is out of paper.
		</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PrinterError: off line ]%%</term>
	<listitem>
		<para>Indicates that the printer explicitly indicates that it has
		been taken off line, generally by a user pressing a button.  If the
		interface prints this message before exiting with the code EXIT_ENGAGED,
		then <command>ppop status</command> will show the printer status as
		"off line" rather than "otherwise engaged or off line".</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PrinterError: printer disconnected or powered down ]%%</term>
	<listitem>
		<para>Indicates that a printer directly connected to the server does not appear
		to be electrically alive at the end of its cable.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ status: busy ]%%</term>
	<listitem>
		<para>Indicates that the printer is online and ready and that any disabling
		PrinterError conditions (such as off line) have cleared.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>%%[ PPR SNMP: <replaceable>hrDeviceStatus</replaceable> <replaceable>hrPrinterStatus</replaceable> <replaceable>hrPrinterDetectedErrorState</replaceable> ]%%</term>
	<listitem>
		<para>This message reports the SNMP status of the printer.  The value
		<replaceable>hrDeviceStatus</replaceable> and <replaceable>hrPrinterStatus</replaceable>
		are decimal integers.  The value <replaceable>hrPrinterDetectedErrorState</replaceable>
		is an eight digit hexadecimal unsigned integer.</para>
	</listitem>
</varlistentry>

</variablelist>

</sect2>

<sect2>
<title>Probe Mode</title>

<para>The <command>ppad ppdq</command> and <command>ppad ppd query</command> commands provide
a way to automatically determine a printer's type.  They use a number of techniques to
accomplish this goal.</para>

<para>One technique is to connect to the printer and sending it query messages to which it
will hopefully respond.  These queries use langauges such as PostScript and PJL.  These techniques
do not generally change according to the connection method, so interface programs need
only support two-way communication in order to support them.</para>

<para>But some connection methods, such as USB and IP may provide additional methods
for obtaining information about the printer, such as alternative communications channels.
For example, many printers which accept jobs over TCP/IP also response to SNMP queries.
Since these methods depend very much on the method of connecting to the printer, probes
of this type, called out-of-band probes, are implemented in interface programs.</para>

<para>Interface programs which support out-of-band probe will recognize and
act on <option>--probe</option>.  It will interrogate the printer in some
way rather than connecting to it with the intention of transmitting a print
job.  The results of the probe are sent back to <command>pprdrv</command> as
a series of <literal>PROBE:</literal> lines.
</para>

<para>If the probe may take more than a few seconds, it is recommended that
the interface immedately send a <literal>PROBE:</literal> line with no value
in order to let <command>ppad</command> know that it supports probe mode. 
Otherwise, <command>ppad</command> may conclude that the interface program
doesn't implement <option>--probe</option> and give up too soon.</para>

<para>If the interface is able to obtain information about the printer, it
should report it by printing addional <literal>PROBE:</literal> lines. 
These show be in the form <literal>PROBE:</literal>
<replaceable>name</replaceable><literal>=</literal><replaceable>value</replaceable>. 
The <replaceable>value</replaceable> should not be quoted, even if it
contains spaces.  Currently defined names are listed below.  Since the probe
feature is very new, this list is subject to change.</para>

<variablelist>

<varlistentry>
	<term>PostScript Product=</term>
	<listitem>
		<para>The PostScript product name.  The value should be the
		bare name without surounding partheses.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>PostScript Version=</term>
	<listitem>
		<para>The PostScript interpreter's version number.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>PostScript Revision=</term>
	<listitem>
		<para>The PostScript interpreter's revision number.</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>SNMP sysDescr=</term>
	<listitem>
		<para>???</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>SNMP hrDeviceDescr=</term>
	<listitem>
		<para>???</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>1284DeviceID MANUFACTURER=</term>
	<listitem>
		<para>???</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>1284DeviceID MFG=</term>
	<listitem>
		<para>same as above</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>1284DeviceID MODEL=</term>
	<listitem>
		<para>???</para>
	</listitem>
</varlistentry>

<varlistentry>
	<term>1284DeviceID MDL=</term>
	<listitem>
		<para>same as above</para>
	</listitem>
</varlistentry>

</variablelist>

<para>When running in probe mode, the interface program will be invoked with
the printer name on the command line set to "-".  The
<function>alert()</function> knows about this special name.  When it is
asked to post an alert to the printer "-", it sends the alert to stderr
instead.  The result is that the messages will be visible to the user of
<command>ppad</command> rather than being hidden away in the alert
log.</para>

</sect2>

</sect1>

